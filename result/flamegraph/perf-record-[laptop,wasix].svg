<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2134" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="2117.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="2117.00"> </text><svg id="frames" x="10" width="1180" total_samples="94574"><g><title>__alloc_pages_nodemask (184 samples, 0.19%)</title><rect x="18.0441%" y="1957" width="0.1946%" height="15" fill="rgb(227,0,7)" fg:x="17065" fg:w="184"/><text x="18.2941%" y="1967.50"></text></g><g><title>get_page_from_freelist (182 samples, 0.19%)</title><rect x="18.0462%" y="1941" width="0.1924%" height="15" fill="rgb(217,0,24)" fg:x="17067" fg:w="182"/><text x="18.2962%" y="1951.50"></text></g><g><title>prep_new_page (170 samples, 0.18%)</title><rect x="18.0589%" y="1925" width="0.1798%" height="15" fill="rgb(221,193,54)" fg:x="17079" fg:w="170"/><text x="18.3089%" y="1935.50"></text></g><g><title>clear_page_erms (167 samples, 0.18%)</title><rect x="18.0620%" y="1909" width="0.1766%" height="15" fill="rgb(248,212,6)" fg:x="17082" fg:w="167"/><text x="18.3120%" y="1919.50"></text></g><g><title>_raw_spin_lock (53 samples, 0.06%)</title><rect x="18.2386%" y="1957" width="0.0560%" height="15" fill="rgb(208,68,35)" fg:x="17249" fg:w="53"/><text x="18.4886%" y="1967.50"></text></g><g><title>__lock_text_start (16 samples, 0.02%)</title><rect x="18.3042%" y="1925" width="0.0169%" height="15" fill="rgb(232,128,0)" fg:x="17311" fg:w="16"/><text x="18.5542%" y="1935.50"></text></g><g><title>lru_cache_add (19 samples, 0.02%)</title><rect x="18.3021%" y="1957" width="0.0201%" height="15" fill="rgb(207,160,47)" fg:x="17309" fg:w="19"/><text x="18.5521%" y="1967.50"></text></g><g><title>pagevec_lru_move_fn (17 samples, 0.02%)</title><rect x="18.3042%" y="1941" width="0.0180%" height="15" fill="rgb(228,23,34)" fg:x="17311" fg:w="17"/><text x="18.5542%" y="1951.50"></text></g><g><title>mem_cgroup_charge (12 samples, 0.01%)</title><rect x="18.3222%" y="1957" width="0.0127%" height="15" fill="rgb(218,30,26)" fg:x="17328" fg:w="12"/><text x="18.5722%" y="1967.50"></text></g><g><title>handle_mm_fault (308 samples, 0.33%)</title><rect x="18.0187%" y="1973" width="0.3257%" height="15" fill="rgb(220,122,19)" fg:x="17041" fg:w="308"/><text x="18.2687%" y="1983.50"></text></g><g><title>exc_page_fault (451 samples, 0.48%)</title><rect x="17.8749%" y="2005" width="0.4769%" height="15" fill="rgb(250,228,42)" fg:x="16905" fg:w="451"/><text x="18.1249%" y="2015.50"></text></g><g><title>do_user_addr_fault (451 samples, 0.48%)</title><rect x="17.8749%" y="1989" width="0.4769%" height="15" fill="rgb(240,193,28)" fg:x="16905" fg:w="451"/><text x="18.1249%" y="1999.50"></text></g><g><title>asm_exc_page_fault (452 samples, 0.48%)</title><rect x="17.8749%" y="2021" width="0.4779%" height="15" fill="rgb(216,20,37)" fg:x="16905" fg:w="452"/><text x="18.1249%" y="2031.50"></text></g><g><title>__memcpy_avx_unaligned_erms (993 samples, 1.05%)</title><rect x="17.3039%" y="2037" width="1.0500%" height="15" fill="rgb(206,188,39)" fg:x="16365" fg:w="993"/><text x="17.5539%" y="2047.50"></text></g><g><title>__alloc_pages_nodemask (437 samples, 0.46%)</title><rect x="18.8889%" y="1957" width="0.4621%" height="15" fill="rgb(217,207,13)" fg:x="17864" fg:w="437"/><text x="19.1389%" y="1967.50"></text></g><g><title>get_page_from_freelist (434 samples, 0.46%)</title><rect x="18.8921%" y="1941" width="0.4589%" height="15" fill="rgb(231,73,38)" fg:x="17867" fg:w="434"/><text x="19.1421%" y="1951.50"></text></g><g><title>prep_new_page (393 samples, 0.42%)</title><rect x="18.9354%" y="1925" width="0.4155%" height="15" fill="rgb(225,20,46)" fg:x="17908" fg:w="393"/><text x="19.1854%" y="1935.50"></text></g><g><title>clear_page_erms (390 samples, 0.41%)</title><rect x="18.9386%" y="1909" width="0.4124%" height="15" fill="rgb(210,31,41)" fg:x="17911" fg:w="390"/><text x="19.1886%" y="1919.50"></text></g><g><title>_raw_spin_lock (111 samples, 0.12%)</title><rect x="19.3531%" y="1957" width="0.1174%" height="15" fill="rgb(221,200,47)" fg:x="18303" fg:w="111"/><text x="19.6031%" y="1967.50"></text></g><g><title>cgroup_throttle_swaprate (11 samples, 0.01%)</title><rect x="19.4715%" y="1957" width="0.0116%" height="15" fill="rgb(226,26,5)" fg:x="18415" fg:w="11"/><text x="19.7215%" y="1967.50"></text></g><g><title>__lock_text_start (21 samples, 0.02%)</title><rect x="19.4853%" y="1925" width="0.0222%" height="15" fill="rgb(249,33,26)" fg:x="18428" fg:w="21"/><text x="19.7353%" y="1935.50"></text></g><g><title>lru_cache_add (28 samples, 0.03%)</title><rect x="19.4832%" y="1957" width="0.0296%" height="15" fill="rgb(235,183,28)" fg:x="18426" fg:w="28"/><text x="19.7332%" y="1967.50"></text></g><g><title>pagevec_lru_move_fn (26 samples, 0.03%)</title><rect x="19.4853%" y="1941" width="0.0275%" height="15" fill="rgb(221,5,38)" fg:x="18428" fg:w="26"/><text x="19.7353%" y="1951.50"></text></g><g><title>mem_cgroup_charge (20 samples, 0.02%)</title><rect x="19.5138%" y="1957" width="0.0211%" height="15" fill="rgb(247,18,42)" fg:x="18455" fg:w="20"/><text x="19.7638%" y="1967.50"></text></g><g><title>handle_mm_fault (665 samples, 0.70%)</title><rect x="18.8498%" y="1973" width="0.7032%" height="15" fill="rgb(241,131,45)" fg:x="17827" fg:w="665"/><text x="19.0998%" y="1983.50"></text></g><g><title>rwsem_optimistic_spin (13 samples, 0.01%)</title><rect x="19.5529%" y="1957" width="0.0137%" height="15" fill="rgb(249,31,29)" fg:x="18492" fg:w="13"/><text x="19.8029%" y="1967.50"></text></g><g><title>rwsem_spin_on_owner (10 samples, 0.01%)</title><rect x="19.5561%" y="1941" width="0.0106%" height="15" fill="rgb(225,111,53)" fg:x="18495" fg:w="10"/><text x="19.8061%" y="1951.50"></text></g><g><title>rwsem_down_read_slowpath (15 samples, 0.02%)</title><rect x="19.5529%" y="1973" width="0.0159%" height="15" fill="rgb(238,160,17)" fg:x="18492" fg:w="15"/><text x="19.8029%" y="1983.50"></text></g><g><title>__memset_avx2_unaligned_erms (1,158 samples, 1.22%)</title><rect x="18.3539%" y="2037" width="1.2244%" height="15" fill="rgb(214,148,48)" fg:x="17358" fg:w="1158"/><text x="18.6039%" y="2047.50"></text></g><g><title>asm_exc_page_fault (984 samples, 1.04%)</title><rect x="18.5379%" y="2021" width="1.0405%" height="15" fill="rgb(232,36,49)" fg:x="17532" fg:w="984"/><text x="18.7879%" y="2031.50"></text></g><g><title>exc_page_fault (984 samples, 1.04%)</title><rect x="18.5379%" y="2005" width="1.0405%" height="15" fill="rgb(209,103,24)" fg:x="17532" fg:w="984"/><text x="18.7879%" y="2015.50"></text></g><g><title>do_user_addr_fault (984 samples, 1.04%)</title><rect x="18.5379%" y="1989" width="1.0405%" height="15" fill="rgb(229,88,8)" fg:x="17532" fg:w="984"/><text x="18.7879%" y="1999.50"></text></g><g><title>__alloc_pages_nodemask (47 samples, 0.05%)</title><rect x="19.6079%" y="1973" width="0.0497%" height="15" fill="rgb(213,181,19)" fg:x="18544" fg:w="47"/><text x="19.8579%" y="1983.50"></text></g><g><title>get_page_from_freelist (47 samples, 0.05%)</title><rect x="19.6079%" y="1957" width="0.0497%" height="15" fill="rgb(254,191,54)" fg:x="18544" fg:w="47"/><text x="19.8579%" y="1967.50"></text></g><g><title>prep_new_page (39 samples, 0.04%)</title><rect x="19.6164%" y="1941" width="0.0412%" height="15" fill="rgb(241,83,37)" fg:x="18552" fg:w="39"/><text x="19.8664%" y="1951.50"></text></g><g><title>clear_page_erms (38 samples, 0.04%)</title><rect x="19.6174%" y="1925" width="0.0402%" height="15" fill="rgb(233,36,39)" fg:x="18553" fg:w="38"/><text x="19.8674%" y="1935.50"></text></g><g><title>asm_exc_page_fault (89 samples, 0.09%)</title><rect x="19.5783%" y="2037" width="0.0941%" height="15" fill="rgb(226,3,54)" fg:x="18516" fg:w="89"/><text x="19.8283%" y="2047.50"></text></g><g><title>exc_page_fault (89 samples, 0.09%)</title><rect x="19.5783%" y="2021" width="0.0941%" height="15" fill="rgb(245,192,40)" fg:x="18516" fg:w="89"/><text x="19.8283%" y="2031.50"></text></g><g><title>do_user_addr_fault (89 samples, 0.09%)</title><rect x="19.5783%" y="2005" width="0.0941%" height="15" fill="rgb(238,167,29)" fg:x="18516" fg:w="89"/><text x="19.8283%" y="2015.50"></text></g><g><title>handle_mm_fault (69 samples, 0.07%)</title><rect x="19.5995%" y="1989" width="0.0730%" height="15" fill="rgb(232,182,51)" fg:x="18536" fg:w="69"/><text x="19.8495%" y="1999.50"></text></g><g><title>asm_sysvec_hyperv_callback (11 samples, 0.01%)</title><rect x="19.6724%" y="2037" width="0.0116%" height="15" fill="rgb(231,60,39)" fg:x="18605" fg:w="11"/><text x="19.9224%" y="2047.50"></text></g><g><title>sysvec_hyperv_callback (11 samples, 0.01%)</title><rect x="19.6724%" y="2021" width="0.0116%" height="15" fill="rgb(208,69,12)" fg:x="18605" fg:w="11"/><text x="19.9224%" y="2031.50"></text></g><g><title>irq_exit_rcu (11 samples, 0.01%)</title><rect x="19.6724%" y="2005" width="0.0116%" height="15" fill="rgb(235,93,37)" fg:x="18605" fg:w="11"/><text x="19.9224%" y="2015.50"></text></g><g><title>do_softirq_own_stack (11 samples, 0.01%)</title><rect x="19.6724%" y="1989" width="0.0116%" height="15" fill="rgb(213,116,39)" fg:x="18605" fg:w="11"/><text x="19.9224%" y="1999.50"></text></g><g><title>asm_call_sysvec_on_stack (11 samples, 0.01%)</title><rect x="19.6724%" y="1973" width="0.0116%" height="15" fill="rgb(222,207,29)" fg:x="18605" fg:w="11"/><text x="19.9224%" y="1983.50"></text></g><g><title>__softirqentry_text_start (11 samples, 0.01%)</title><rect x="19.6724%" y="1957" width="0.0116%" height="15" fill="rgb(206,96,30)" fg:x="18605" fg:w="11"/><text x="19.9224%" y="1967.50"></text></g><g><title>wasmer_types::indexes::MemoryIndex::as_u32 (297 samples, 0.31%)</title><rect x="20.4824%" y="2021" width="0.3140%" height="15" fill="rgb(218,138,4)" fg:x="19371" fg:w="297"/><text x="20.7324%" y="2031.50"></text></g><g><title>wasmer_vm_imported_memory32_copy (1,317 samples, 1.39%)</title><rect x="19.6999%" y="2037" width="1.3926%" height="15" fill="rgb(250,191,14)" fg:x="18631" fg:w="1317"/><text x="19.9499%" y="2047.50"></text></g><g><title>wasmer_types::vmoffsets::VMOffsets::vmctx_imported_memories_begin (280 samples, 0.30%)</title><rect x="20.7964%" y="2021" width="0.2961%" height="15" fill="rgb(239,60,40)" fg:x="19668" fg:w="280"/><text x="21.0464%" y="2031.50"></text></g><g><title>[perf-6356.map] (19,954 samples, 21.10%)</title><rect x="0.0000%" y="2053" width="21.0988%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="19954"/><text x="0.2500%" y="2063.50">[perf-6356.map]</text></g><g><title>mprotect_fixup (10 samples, 0.01%)</title><rect x="21.1083%" y="1973" width="0.0106%" height="15" fill="rgb(225,35,8)" fg:x="19963" fg:w="10"/><text x="21.3583%" y="1983.50"></text></g><g><title>__x64_sys_mprotect (30 samples, 0.03%)</title><rect x="21.1020%" y="2005" width="0.0317%" height="15" fill="rgb(250,213,24)" fg:x="19957" fg:w="30"/><text x="21.3520%" y="2015.50"></text></g><g><title>do_mprotect_pkey (29 samples, 0.03%)</title><rect x="21.1031%" y="1989" width="0.0307%" height="15" fill="rgb(247,123,22)" fg:x="19958" fg:w="29"/><text x="21.3531%" y="1999.50"></text></g><g><title>rwsem_wake.isra.0 (14 samples, 0.01%)</title><rect x="21.1189%" y="1973" width="0.0148%" height="15" fill="rgb(231,138,38)" fg:x="19973" fg:w="14"/><text x="21.3689%" y="1983.50"></text></g><g><title>wake_up_q (14 samples, 0.01%)</title><rect x="21.1189%" y="1957" width="0.0148%" height="15" fill="rgb(231,145,46)" fg:x="19973" fg:w="14"/><text x="21.3689%" y="1967.50"></text></g><g><title>try_to_wake_up (14 samples, 0.01%)</title><rect x="21.1189%" y="1941" width="0.0148%" height="15" fill="rgb(251,118,11)" fg:x="19973" fg:w="14"/><text x="21.3689%" y="1951.50"></text></g><g><title>__lock_text_start (14 samples, 0.01%)</title><rect x="21.1189%" y="1925" width="0.0148%" height="15" fill="rgb(217,147,25)" fg:x="19973" fg:w="14"/><text x="21.3689%" y="1935.50"></text></g><g><title>do_syscall_64 (31 samples, 0.03%)</title><rect x="21.1020%" y="2021" width="0.0328%" height="15" fill="rgb(247,81,37)" fg:x="19957" fg:w="31"/><text x="21.3520%" y="2031.50"></text></g><g><title>__GI_mprotect (33 samples, 0.03%)</title><rect x="21.1009%" y="2053" width="0.0349%" height="15" fill="rgb(209,12,38)" fg:x="19956" fg:w="33"/><text x="21.3509%" y="2063.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (32 samples, 0.03%)</title><rect x="21.1020%" y="2037" width="0.0338%" height="15" fill="rgb(227,1,9)" fg:x="19957" fg:w="32"/><text x="21.3520%" y="2047.50"></text></g><g><title>__x64_sys_sched_yield (40 samples, 0.04%)</title><rect x="21.1485%" y="2005" width="0.0423%" height="15" fill="rgb(248,47,43)" fg:x="20001" fg:w="40"/><text x="21.3985%" y="2015.50"></text></g><g><title>schedule (35 samples, 0.04%)</title><rect x="21.1538%" y="1989" width="0.0370%" height="15" fill="rgb(221,10,30)" fg:x="20006" fg:w="35"/><text x="21.4038%" y="1999.50"></text></g><g><title>__sched_text_start (34 samples, 0.04%)</title><rect x="21.1549%" y="1973" width="0.0360%" height="15" fill="rgb(210,229,1)" fg:x="20007" fg:w="34"/><text x="21.4049%" y="1983.50"></text></g><g><title>__GI_sched_yield (62 samples, 0.07%)</title><rect x="21.1358%" y="2053" width="0.0656%" height="15" fill="rgb(222,148,37)" fg:x="19989" fg:w="62"/><text x="21.3858%" y="2063.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (52 samples, 0.05%)</title><rect x="21.1464%" y="2037" width="0.0550%" height="15" fill="rgb(234,67,33)" fg:x="19999" fg:w="52"/><text x="21.3964%" y="2047.50"></text></g><g><title>do_syscall_64 (52 samples, 0.05%)</title><rect x="21.1464%" y="2021" width="0.0550%" height="15" fill="rgb(247,98,35)" fg:x="19999" fg:w="52"/><text x="21.3964%" y="2031.50"></text></g><g><title>syscall_enter_from_user_mode (10 samples, 0.01%)</title><rect x="21.1908%" y="2005" width="0.0106%" height="15" fill="rgb(247,138,52)" fg:x="20041" fg:w="10"/><text x="21.4408%" y="2015.50"></text></g><g><title>page_remove_rmap (11 samples, 0.01%)</title><rect x="21.2151%" y="1877" width="0.0116%" height="15" fill="rgb(213,79,30)" fg:x="20064" fg:w="11"/><text x="21.4651%" y="1887.50"></text></g><g><title>__lock_text_start (12 samples, 0.01%)</title><rect x="21.2310%" y="1845" width="0.0127%" height="15" fill="rgb(246,177,23)" fg:x="20079" fg:w="12"/><text x="21.4810%" y="1855.50"></text></g><g><title>free_unref_page_list (22 samples, 0.02%)</title><rect x="21.2437%" y="1845" width="0.0233%" height="15" fill="rgb(230,62,27)" fg:x="20091" fg:w="22"/><text x="21.4937%" y="1855.50"></text></g><g><title>mmput (62 samples, 0.07%)</title><rect x="21.2024%" y="1941" width="0.0656%" height="15" fill="rgb(216,154,8)" fg:x="20052" fg:w="62"/><text x="21.4524%" y="1951.50"></text></g><g><title>exit_mmap (62 samples, 0.07%)</title><rect x="21.2024%" y="1925" width="0.0656%" height="15" fill="rgb(244,35,45)" fg:x="20052" fg:w="62"/><text x="21.4524%" y="1935.50"></text></g><g><title>unmap_vmas (61 samples, 0.06%)</title><rect x="21.2035%" y="1909" width="0.0645%" height="15" fill="rgb(251,115,12)" fg:x="20053" fg:w="61"/><text x="21.4535%" y="1919.50"></text></g><g><title>unmap_page_range (61 samples, 0.06%)</title><rect x="21.2035%" y="1893" width="0.0645%" height="15" fill="rgb(240,54,50)" fg:x="20053" fg:w="61"/><text x="21.4535%" y="1903.50"></text></g><g><title>tlb_flush_mmu (39 samples, 0.04%)</title><rect x="21.2268%" y="1877" width="0.0412%" height="15" fill="rgb(233,84,52)" fg:x="20075" fg:w="39"/><text x="21.4768%" y="1887.50"></text></g><g><title>release_pages (35 samples, 0.04%)</title><rect x="21.2310%" y="1861" width="0.0370%" height="15" fill="rgb(207,117,47)" fg:x="20079" fg:w="35"/><text x="21.4810%" y="1871.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (71 samples, 0.08%)</title><rect x="21.2014%" y="2053" width="0.0751%" height="15" fill="rgb(249,43,39)" fg:x="20051" fg:w="71"/><text x="21.4514%" y="2063.50"></text></g><g><title>syscall_exit_to_user_mode (71 samples, 0.08%)</title><rect x="21.2014%" y="2037" width="0.0751%" height="15" fill="rgb(209,38,44)" fg:x="20051" fg:w="71"/><text x="21.4514%" y="2047.50"></text></g><g><title>exit_to_user_mode_prepare (71 samples, 0.08%)</title><rect x="21.2014%" y="2021" width="0.0751%" height="15" fill="rgb(236,212,23)" fg:x="20051" fg:w="71"/><text x="21.4514%" y="2031.50"></text></g><g><title>arch_do_signal (71 samples, 0.08%)</title><rect x="21.2014%" y="2005" width="0.0751%" height="15" fill="rgb(242,79,21)" fg:x="20051" fg:w="71"/><text x="21.4514%" y="2015.50"></text></g><g><title>get_signal (71 samples, 0.08%)</title><rect x="21.2014%" y="1989" width="0.0751%" height="15" fill="rgb(211,96,35)" fg:x="20051" fg:w="71"/><text x="21.4514%" y="1999.50"></text></g><g><title>do_group_exit (71 samples, 0.08%)</title><rect x="21.2014%" y="1973" width="0.0751%" height="15" fill="rgb(253,215,40)" fg:x="20051" fg:w="71"/><text x="21.4514%" y="1983.50"></text></g><g><title>do_exit (71 samples, 0.08%)</title><rect x="21.2014%" y="1957" width="0.0751%" height="15" fill="rgb(211,81,21)" fg:x="20051" fg:w="71"/><text x="21.4514%" y="1967.50"></text></g><g><title>wasmer_wasix::state::env::WasiEnv::process_signals_and_exit (46 samples, 0.05%)</title><rect x="21.3050%" y="1973" width="0.0486%" height="15" fill="rgb(208,190,38)" fg:x="20149" fg:w="46"/><text x="21.5550%" y="1983.50"></text></g><g><title>wasmer_wasix::state::env::WasiEnv::should_exit (31 samples, 0.03%)</title><rect x="21.3209%" y="1957" width="0.0328%" height="15" fill="rgb(235,213,38)" fg:x="20164" fg:w="31"/><text x="21.5709%" y="1967.50"></text></g><g><title>wasmer_wasix::os::task::task_join_handle::OwnedTaskStatus::status (29 samples, 0.03%)</title><rect x="21.3230%" y="1941" width="0.0307%" height="15" fill="rgb(237,122,38)" fg:x="20166" fg:w="29"/><text x="21.5730%" y="1951.50"></text></g><g><title>stack_call_trampoline (79 samples, 0.08%)</title><rect x="21.2765%" y="2053" width="0.0835%" height="15" fill="rgb(244,218,35)" fg:x="20122" fg:w="79"/><text x="21.5265%" y="2063.50"></text></g><g><title>corosensei::coroutine::on_stack::wrapper (79 samples, 0.08%)</title><rect x="21.2765%" y="2037" width="0.0835%" height="15" fill="rgb(240,68,47)" fg:x="20122" fg:w="79"/><text x="21.5265%" y="2047.50"></text></g><g><title>std::panicking::try (69 samples, 0.07%)</title><rect x="21.2870%" y="2021" width="0.0730%" height="15" fill="rgb(210,16,53)" fg:x="20132" fg:w="69"/><text x="21.5370%" y="2031.50"></text></g><g><title>wasmer_wasix::syscalls::wasix::sched_yield::sched_yield (64 samples, 0.07%)</title><rect x="21.2923%" y="2005" width="0.0677%" height="15" fill="rgb(235,124,12)" fg:x="20137" fg:w="64"/><text x="21.5423%" y="2015.50"></text></g><g><title>wasmer_wasix::syscalls::wasix::thread_sleep::thread_sleep_internal (61 samples, 0.06%)</title><rect x="21.2955%" y="1989" width="0.0645%" height="15" fill="rgb(224,169,11)" fg:x="20140" fg:w="61"/><text x="21.5455%" y="1999.50"></text></g><g><title>TokioTaskManage (20,204 samples, 21.36%)</title><rect x="0.0000%" y="2069" width="21.3632%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="20204"/><text x="0.2500%" y="2079.50">TokioTaskManage</text></g><g><title>cpuUsage.sh (18 samples, 0.02%)</title><rect x="21.3727%" y="2069" width="0.0190%" height="15" fill="rgb(242,216,29)" fg:x="20213" fg:w="18"/><text x="21.6227%" y="2079.50"></text></g><g><title>ls (14 samples, 0.01%)</title><rect x="21.3981%" y="2069" width="0.0148%" height="15" fill="rgb(230,116,27)" fg:x="20237" fg:w="14"/><text x="21.6481%" y="2079.50"></text></g><g><title>v8::internal::Builtin_ObjectDefineProperties (11 samples, 0.01%)</title><rect x="21.4393%" y="2021" width="0.0116%" height="15" fill="rgb(228,99,48)" fg:x="20276" fg:w="11"/><text x="21.6893%" y="2031.50"></text></g><g><title>v8::internal::JSReceiver::DefineProperties (11 samples, 0.01%)</title><rect x="21.4393%" y="2005" width="0.0116%" height="15" fill="rgb(253,11,6)" fg:x="20276" fg:w="11"/><text x="21.6893%" y="2015.50"></text></g><g><title>v8::internal::JSReceiver::GetOwnPropertyDescriptor (10 samples, 0.01%)</title><rect x="21.4509%" y="2005" width="0.0106%" height="15" fill="rgb(247,143,39)" fg:x="20287" fg:w="10"/><text x="21.7009%" y="2015.50"></text></g><g><title>v8::internal::JSReceiver::GetOwnPropertyDescriptor (10 samples, 0.01%)</title><rect x="21.4509%" y="1989" width="0.0106%" height="15" fill="rgb(236,97,10)" fg:x="20287" fg:w="10"/><text x="21.7009%" y="1999.50"></text></g><g><title>v8::internal::Object::GetProperty (10 samples, 0.01%)</title><rect x="21.4509%" y="1973" width="0.0106%" height="15" fill="rgb(233,208,19)" fg:x="20287" fg:w="10"/><text x="21.7009%" y="1983.50"></text></g><g><title>v8::internal::Object::GetPropertyWithAccessor (10 samples, 0.01%)</title><rect x="21.4509%" y="1957" width="0.0106%" height="15" fill="rgb(216,164,2)" fg:x="20287" fg:w="10"/><text x="21.7009%" y="1967.50"></text></g><g><title>Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (25 samples, 0.03%)</title><rect x="21.4372%" y="2037" width="0.0264%" height="15" fill="rgb(220,129,5)" fg:x="20274" fg:w="25"/><text x="21.6872%" y="2047.50"></text></g><g><title>v8::internal::Builtin_ObjectGetOwnPropertyDescriptors (12 samples, 0.01%)</title><rect x="21.4509%" y="2021" width="0.0127%" height="15" fill="rgb(242,17,10)" fg:x="20287" fg:w="12"/><text x="21.7009%" y="2031.50"></text></g><g><title>__GI__Fork (14 samples, 0.01%)</title><rect x="21.4710%" y="1941" width="0.0148%" height="15" fill="rgb(242,107,0)" fg:x="20306" fg:w="14"/><text x="21.7210%" y="1951.50"></text></g><g><title>arch_fork (14 samples, 0.01%)</title><rect x="21.4710%" y="1925" width="0.0148%" height="15" fill="rgb(251,28,31)" fg:x="20306" fg:w="14"/><text x="21.7210%" y="1935.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.01%)</title><rect x="21.4710%" y="1909" width="0.0148%" height="15" fill="rgb(233,223,10)" fg:x="20306" fg:w="14"/><text x="21.7210%" y="1919.50"></text></g><g><title>do_syscall_64 (14 samples, 0.01%)</title><rect x="21.4710%" y="1893" width="0.0148%" height="15" fill="rgb(215,21,27)" fg:x="20306" fg:w="14"/><text x="21.7210%" y="1903.50"></text></g><g><title>__do_sys_clone (14 samples, 0.01%)</title><rect x="21.4710%" y="1877" width="0.0148%" height="15" fill="rgb(232,23,21)" fg:x="20306" fg:w="14"/><text x="21.7210%" y="1887.50"></text></g><g><title>kernel_clone (14 samples, 0.01%)</title><rect x="21.4710%" y="1861" width="0.0148%" height="15" fill="rgb(244,5,23)" fg:x="20306" fg:w="14"/><text x="21.7210%" y="1871.50"></text></g><g><title>copy_process (14 samples, 0.01%)</title><rect x="21.4710%" y="1845" width="0.0148%" height="15" fill="rgb(226,81,46)" fg:x="20306" fg:w="14"/><text x="21.7210%" y="1855.50"></text></g><g><title>dup_mm (14 samples, 0.01%)</title><rect x="21.4710%" y="1829" width="0.0148%" height="15" fill="rgb(247,70,30)" fg:x="20306" fg:w="14"/><text x="21.7210%" y="1839.50"></text></g><g><title>copy_page_range (13 samples, 0.01%)</title><rect x="21.4721%" y="1813" width="0.0137%" height="15" fill="rgb(212,68,19)" fg:x="20307" fg:w="13"/><text x="21.7221%" y="1823.50"></text></g><g><title>node::(anonymous namespace)::ProcessWrap::Spawn (15 samples, 0.02%)</title><rect x="21.4710%" y="2021" width="0.0159%" height="15" fill="rgb(240,187,13)" fg:x="20306" fg:w="15"/><text x="21.7210%" y="2031.50"></text></g><g><title>uv_spawn (15 samples, 0.02%)</title><rect x="21.4710%" y="2005" width="0.0159%" height="15" fill="rgb(223,113,26)" fg:x="20306" fg:w="15"/><text x="21.7210%" y="2015.50"></text></g><g><title>uv__spawn_and_init_child (15 samples, 0.02%)</title><rect x="21.4710%" y="1989" width="0.0159%" height="15" fill="rgb(206,192,2)" fg:x="20306" fg:w="15"/><text x="21.7210%" y="1999.50"></text></g><g><title>uv__spawn_and_init_child_fork (15 samples, 0.02%)</title><rect x="21.4710%" y="1973" width="0.0159%" height="15" fill="rgb(241,108,4)" fg:x="20306" fg:w="15"/><text x="21.7210%" y="1983.50"></text></g><g><title>__libc_fork (15 samples, 0.02%)</title><rect x="21.4710%" y="1957" width="0.0159%" height="15" fill="rgb(247,173,49)" fg:x="20306" fg:w="15"/><text x="21.7210%" y="1967.50"></text></g><g><title>Builtins_CallApiCallback (43 samples, 0.05%)</title><rect x="21.4710%" y="2037" width="0.0455%" height="15" fill="rgb(224,114,35)" fg:x="20306" fg:w="43"/><text x="21.7210%" y="2047.50"></text></g><g><title>node::fs::Stat (11 samples, 0.01%)</title><rect x="21.5049%" y="2021" width="0.0116%" height="15" fill="rgb(245,159,27)" fg:x="20338" fg:w="11"/><text x="21.7549%" y="2031.50"></text></g><g><title>uv_fs_stat (11 samples, 0.01%)</title><rect x="21.5049%" y="2005" width="0.0116%" height="15" fill="rgb(245,172,44)" fg:x="20338" fg:w="11"/><text x="21.7549%" y="2015.50"></text></g><g><title>uv__work_submit (11 samples, 0.01%)</title><rect x="21.5049%" y="1989" width="0.0116%" height="15" fill="rgb(236,23,11)" fg:x="20338" fg:w="11"/><text x="21.7549%" y="1999.50"></text></g><g><title>post (11 samples, 0.01%)</title><rect x="21.5049%" y="1973" width="0.0116%" height="15" fill="rgb(205,117,38)" fg:x="20338" fg:w="11"/><text x="21.7549%" y="1983.50"></text></g><g><title>uv_cond_signal (11 samples, 0.01%)</title><rect x="21.5049%" y="1957" width="0.0116%" height="15" fill="rgb(237,72,25)" fg:x="20338" fg:w="11"/><text x="21.7549%" y="1967.50"></text></g><g><title>___pthread_cond_signal (11 samples, 0.01%)</title><rect x="21.5049%" y="1941" width="0.0116%" height="15" fill="rgb(244,70,9)" fg:x="20338" fg:w="11"/><text x="21.7549%" y="1951.50"></text></g><g><title>futex_wake (11 samples, 0.01%)</title><rect x="21.5049%" y="1925" width="0.0116%" height="15" fill="rgb(217,125,39)" fg:x="20338" fg:w="11"/><text x="21.7549%" y="1935.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10 samples, 0.01%)</title><rect x="21.5059%" y="1909" width="0.0106%" height="15" fill="rgb(235,36,10)" fg:x="20339" fg:w="10"/><text x="21.7559%" y="1919.50"></text></g><g><title>do_syscall_64 (10 samples, 0.01%)</title><rect x="21.5059%" y="1893" width="0.0106%" height="15" fill="rgb(251,123,47)" fg:x="20339" fg:w="10"/><text x="21.7559%" y="1903.50"></text></g><g><title>__x64_sys_futex (10 samples, 0.01%)</title><rect x="21.5059%" y="1877" width="0.0106%" height="15" fill="rgb(221,13,13)" fg:x="20339" fg:w="10"/><text x="21.7559%" y="1887.50"></text></g><g><title>do_futex (10 samples, 0.01%)</title><rect x="21.5059%" y="1861" width="0.0106%" height="15" fill="rgb(238,131,9)" fg:x="20339" fg:w="10"/><text x="21.7559%" y="1871.50"></text></g><g><title>futex_wake (10 samples, 0.01%)</title><rect x="21.5059%" y="1845" width="0.0106%" height="15" fill="rgb(211,50,8)" fg:x="20339" fg:w="10"/><text x="21.7559%" y="1855.50"></text></g><g><title>wake_up_q (10 samples, 0.01%)</title><rect x="21.5059%" y="1829" width="0.0106%" height="15" fill="rgb(245,182,24)" fg:x="20339" fg:w="10"/><text x="21.7559%" y="1839.50"></text></g><g><title>try_to_wake_up (10 samples, 0.01%)</title><rect x="21.5059%" y="1813" width="0.0106%" height="15" fill="rgb(242,14,37)" fg:x="20339" fg:w="10"/><text x="21.7559%" y="1823.50"></text></g><g><title>__lock_text_start (10 samples, 0.01%)</title><rect x="21.5059%" y="1797" width="0.0106%" height="15" fill="rgb(246,228,12)" fg:x="20339" fg:w="10"/><text x="21.7559%" y="1807.50"></text></g><g><title>[perf-110.map] (113 samples, 0.12%)</title><rect x="21.4192%" y="2053" width="0.1195%" height="15" fill="rgb(213,55,15)" fg:x="20257" fg:w="113"/><text x="21.6692%" y="2063.50"></text></g><g><title>[perf-23.map] (10 samples, 0.01%)</title><rect x="21.5387%" y="2053" width="0.0106%" height="15" fill="rgb(209,9,3)" fg:x="20370" fg:w="10"/><text x="21.7887%" y="2063.50"></text></g><g><title>Builtins_CallApiCallback (11 samples, 0.01%)</title><rect x="21.5641%" y="2037" width="0.0116%" height="15" fill="rgb(230,59,30)" fg:x="20394" fg:w="11"/><text x="21.8141%" y="2047.50"></text></g><g><title>[perf-692.map] (16 samples, 0.02%)</title><rect x="21.5598%" y="2053" width="0.0169%" height="15" fill="rgb(209,121,21)" fg:x="20390" fg:w="16"/><text x="21.8098%" y="2063.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.01%)</title><rect x="21.5831%" y="245" width="0.0127%" height="15" fill="rgb(220,109,13)" fg:x="20412" fg:w="12"/><text x="21.8331%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.01%)</title><rect x="21.5831%" y="229" width="0.0127%" height="15" fill="rgb(232,18,1)" fg:x="20412" fg:w="12"/><text x="21.8331%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (11 samples, 0.01%)</title><rect x="21.5842%" y="213" width="0.0116%" height="15" fill="rgb(215,41,42)" fg:x="20413" fg:w="11"/><text x="21.8342%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.01%)</title><rect x="21.5842%" y="197" width="0.0116%" height="15" fill="rgb(224,123,36)" fg:x="20413" fg:w="11"/><text x="21.8342%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.01%)</title><rect x="21.5842%" y="181" width="0.0116%" height="15" fill="rgb(240,125,3)" fg:x="20413" fg:w="11"/><text x="21.8342%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21 samples, 0.02%)</title><rect x="21.5810%" y="309" width="0.0222%" height="15" fill="rgb(205,98,50)" fg:x="20410" fg:w="21"/><text x="21.8310%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20 samples, 0.02%)</title><rect x="21.5820%" y="293" width="0.0211%" height="15" fill="rgb(205,185,37)" fg:x="20411" fg:w="20"/><text x="21.8320%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (19 samples, 0.02%)</title><rect x="21.5831%" y="277" width="0.0201%" height="15" fill="rgb(238,207,15)" fg:x="20412" fg:w="19"/><text x="21.8331%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19 samples, 0.02%)</title><rect x="21.5831%" y="261" width="0.0201%" height="15" fill="rgb(213,199,42)" fg:x="20412" fg:w="19"/><text x="21.8331%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (34 samples, 0.04%)</title><rect x="21.5799%" y="341" width="0.0360%" height="15" fill="rgb(235,201,11)" fg:x="20409" fg:w="34"/><text x="21.8299%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (34 samples, 0.04%)</title><rect x="21.5799%" y="325" width="0.0360%" height="15" fill="rgb(207,46,11)" fg:x="20409" fg:w="34"/><text x="21.8299%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (12 samples, 0.01%)</title><rect x="21.6032%" y="309" width="0.0127%" height="15" fill="rgb(241,35,35)" fg:x="20431" fg:w="12"/><text x="21.8532%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (35 samples, 0.04%)</title><rect x="21.5799%" y="373" width="0.0370%" height="15" fill="rgb(243,32,47)" fg:x="20409" fg:w="35"/><text x="21.8299%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (35 samples, 0.04%)</title><rect x="21.5799%" y="357" width="0.0370%" height="15" fill="rgb(247,202,23)" fg:x="20409" fg:w="35"/><text x="21.8299%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (50 samples, 0.05%)</title><rect x="21.5778%" y="437" width="0.0529%" height="15" fill="rgb(219,102,11)" fg:x="20407" fg:w="50"/><text x="21.8278%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (50 samples, 0.05%)</title><rect x="21.5778%" y="421" width="0.0529%" height="15" fill="rgb(243,110,44)" fg:x="20407" fg:w="50"/><text x="21.8278%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (49 samples, 0.05%)</title><rect x="21.5789%" y="405" width="0.0518%" height="15" fill="rgb(222,74,54)" fg:x="20408" fg:w="49"/><text x="21.8289%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (49 samples, 0.05%)</title><rect x="21.5789%" y="389" width="0.0518%" height="15" fill="rgb(216,99,12)" fg:x="20408" fg:w="49"/><text x="21.8289%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (13 samples, 0.01%)</title><rect x="21.6169%" y="373" width="0.0137%" height="15" fill="rgb(226,22,26)" fg:x="20444" fg:w="13"/><text x="21.8669%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (63 samples, 0.07%)</title><rect x="21.5778%" y="501" width="0.0666%" height="15" fill="rgb(217,163,10)" fg:x="20407" fg:w="63"/><text x="21.8278%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (63 samples, 0.07%)</title><rect x="21.5778%" y="485" width="0.0666%" height="15" fill="rgb(213,25,53)" fg:x="20407" fg:w="63"/><text x="21.8278%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (63 samples, 0.07%)</title><rect x="21.5778%" y="469" width="0.0666%" height="15" fill="rgb(252,105,26)" fg:x="20407" fg:w="63"/><text x="21.8278%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (63 samples, 0.07%)</title><rect x="21.5778%" y="453" width="0.0666%" height="15" fill="rgb(220,39,43)" fg:x="20407" fg:w="63"/><text x="21.8278%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (13 samples, 0.01%)</title><rect x="21.6307%" y="437" width="0.0137%" height="15" fill="rgb(229,68,48)" fg:x="20457" fg:w="13"/><text x="21.8807%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (70 samples, 0.07%)</title><rect x="21.5768%" y="565" width="0.0740%" height="15" fill="rgb(252,8,32)" fg:x="20406" fg:w="70"/><text x="21.8268%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (70 samples, 0.07%)</title><rect x="21.5768%" y="549" width="0.0740%" height="15" fill="rgb(223,20,43)" fg:x="20406" fg:w="70"/><text x="21.8268%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (69 samples, 0.07%)</title><rect x="21.5778%" y="533" width="0.0730%" height="15" fill="rgb(229,81,49)" fg:x="20407" fg:w="69"/><text x="21.8278%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (69 samples, 0.07%)</title><rect x="21.5778%" y="517" width="0.0730%" height="15" fill="rgb(236,28,36)" fg:x="20407" fg:w="69"/><text x="21.8278%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (76 samples, 0.08%)</title><rect x="21.5768%" y="629" width="0.0804%" height="15" fill="rgb(249,185,26)" fg:x="20406" fg:w="76"/><text x="21.8268%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (76 samples, 0.08%)</title><rect x="21.5768%" y="613" width="0.0804%" height="15" fill="rgb(249,174,33)" fg:x="20406" fg:w="76"/><text x="21.8268%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (76 samples, 0.08%)</title><rect x="21.5768%" y="597" width="0.0804%" height="15" fill="rgb(233,201,37)" fg:x="20406" fg:w="76"/><text x="21.8268%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (76 samples, 0.08%)</title><rect x="21.5768%" y="581" width="0.0804%" height="15" fill="rgb(221,78,26)" fg:x="20406" fg:w="76"/><text x="21.8268%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (85 samples, 0.09%)</title><rect x="21.5768%" y="693" width="0.0899%" height="15" fill="rgb(250,127,30)" fg:x="20406" fg:w="85"/><text x="21.8268%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (85 samples, 0.09%)</title><rect x="21.5768%" y="677" width="0.0899%" height="15" fill="rgb(230,49,44)" fg:x="20406" fg:w="85"/><text x="21.8268%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (85 samples, 0.09%)</title><rect x="21.5768%" y="661" width="0.0899%" height="15" fill="rgb(229,67,23)" fg:x="20406" fg:w="85"/><text x="21.8268%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (85 samples, 0.09%)</title><rect x="21.5768%" y="645" width="0.0899%" height="15" fill="rgb(249,83,47)" fg:x="20406" fg:w="85"/><text x="21.8268%" y="655.50"></text></g><g><title>InotifyBackend::handleEvents (86 samples, 0.09%)</title><rect x="21.5768%" y="2037" width="0.0909%" height="15" fill="rgb(215,43,3)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="2047.50"></text></g><g><title>InotifyBackend::handleEvent (86 samples, 0.09%)</title><rect x="21.5768%" y="2021" width="0.0909%" height="15" fill="rgb(238,154,13)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="2031.50"></text></g><g><title>InotifyBackend::handleSubscription (86 samples, 0.09%)</title><rect x="21.5768%" y="2005" width="0.0909%" height="15" fill="rgb(219,56,2)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="2015.50"></text></g><g><title>Watcher::isIgnored (86 samples, 0.09%)</title><rect x="21.5768%" y="1989" width="0.0909%" height="15" fill="rgb(233,0,4)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1999.50"></text></g><g><title>Glob::isIgnored (86 samples, 0.09%)</title><rect x="21.5768%" y="1973" width="0.0909%" height="15" fill="rgb(235,30,7)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1983.50"></text></g><g><title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;, (std::__detail::_RegexExecutorPolicy)0, true&gt; (86 samples, 0.09%)</title><rect x="21.5768%" y="1957" width="0.0909%" height="15" fill="rgb(250,79,13)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1941" width="0.0909%" height="15" fill="rgb(211,146,34)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1925" width="0.0909%" height="15" fill="rgb(228,22,38)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1909" width="0.0909%" height="15" fill="rgb(235,168,5)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1893" width="0.0909%" height="15" fill="rgb(221,155,16)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1877" width="0.0909%" height="15" fill="rgb(215,215,53)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1861" width="0.0909%" height="15" fill="rgb(223,4,10)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1845" width="0.0909%" height="15" fill="rgb(234,103,6)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1829" width="0.0909%" height="15" fill="rgb(227,97,0)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1813" width="0.0909%" height="15" fill="rgb(234,150,53)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1797" width="0.0909%" height="15" fill="rgb(228,201,54)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1781" width="0.0909%" height="15" fill="rgb(222,22,37)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1765" width="0.0909%" height="15" fill="rgb(237,53,32)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1749" width="0.0909%" height="15" fill="rgb(233,25,53)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1733" width="0.0909%" height="15" fill="rgb(210,40,34)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1717" width="0.0909%" height="15" fill="rgb(241,220,44)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1701" width="0.0909%" height="15" fill="rgb(235,28,35)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1685" width="0.0909%" height="15" fill="rgb(210,56,17)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1669" width="0.0909%" height="15" fill="rgb(224,130,29)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1653" width="0.0909%" height="15" fill="rgb(235,212,8)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1637" width="0.0909%" height="15" fill="rgb(223,33,50)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1621" width="0.0909%" height="15" fill="rgb(219,149,13)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1605" width="0.0909%" height="15" fill="rgb(250,156,29)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1589" width="0.0909%" height="15" fill="rgb(216,193,19)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1573" width="0.0909%" height="15" fill="rgb(216,135,14)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1557" width="0.0909%" height="15" fill="rgb(241,47,5)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1541" width="0.0909%" height="15" fill="rgb(233,42,35)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1525" width="0.0909%" height="15" fill="rgb(231,13,6)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1509" width="0.0909%" height="15" fill="rgb(207,181,40)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1493" width="0.0909%" height="15" fill="rgb(254,173,49)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1477" width="0.0909%" height="15" fill="rgb(221,1,38)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1461" width="0.0909%" height="15" fill="rgb(206,124,46)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1445" width="0.0909%" height="15" fill="rgb(249,21,11)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1429" width="0.0909%" height="15" fill="rgb(222,201,40)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1413" width="0.0909%" height="15" fill="rgb(235,61,29)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1397" width="0.0909%" height="15" fill="rgb(219,207,3)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1381" width="0.0909%" height="15" fill="rgb(222,56,46)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1365" width="0.0909%" height="15" fill="rgb(239,76,54)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1349" width="0.0909%" height="15" fill="rgb(231,124,27)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1333" width="0.0909%" height="15" fill="rgb(249,195,6)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1317" width="0.0909%" height="15" fill="rgb(237,174,47)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1301" width="0.0909%" height="15" fill="rgb(206,201,31)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1285" width="0.0909%" height="15" fill="rgb(231,57,52)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1269" width="0.0909%" height="15" fill="rgb(248,177,22)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1253" width="0.0909%" height="15" fill="rgb(215,211,37)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1237" width="0.0909%" height="15" fill="rgb(241,128,51)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1221" width="0.0909%" height="15" fill="rgb(227,165,31)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1205" width="0.0909%" height="15" fill="rgb(228,167,24)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1189" width="0.0909%" height="15" fill="rgb(228,143,12)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1173" width="0.0909%" height="15" fill="rgb(249,149,8)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1157" width="0.0909%" height="15" fill="rgb(243,35,44)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1141" width="0.0909%" height="15" fill="rgb(246,89,9)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1125" width="0.0909%" height="15" fill="rgb(233,213,13)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1109" width="0.0909%" height="15" fill="rgb(233,141,41)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1093" width="0.0909%" height="15" fill="rgb(239,167,4)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1077" width="0.0909%" height="15" fill="rgb(209,217,16)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1061" width="0.0909%" height="15" fill="rgb(219,88,35)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="1045" width="0.0909%" height="15" fill="rgb(220,193,23)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1029" width="0.0909%" height="15" fill="rgb(230,90,52)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="1013" width="0.0909%" height="15" fill="rgb(252,106,19)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="997" width="0.0909%" height="15" fill="rgb(206,74,20)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="981" width="0.0909%" height="15" fill="rgb(230,138,44)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="965" width="0.0909%" height="15" fill="rgb(235,182,43)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="949" width="0.0909%" height="15" fill="rgb(242,16,51)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="933" width="0.0909%" height="15" fill="rgb(248,9,4)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="917" width="0.0909%" height="15" fill="rgb(210,31,22)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="901" width="0.0909%" height="15" fill="rgb(239,54,39)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="885" width="0.0909%" height="15" fill="rgb(230,99,41)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="869" width="0.0909%" height="15" fill="rgb(253,106,12)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="853" width="0.0909%" height="15" fill="rgb(213,46,41)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="837" width="0.0909%" height="15" fill="rgb(215,133,35)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="821" width="0.0909%" height="15" fill="rgb(213,28,5)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="805" width="0.0909%" height="15" fill="rgb(215,77,49)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="789" width="0.0909%" height="15" fill="rgb(248,100,22)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="773" width="0.0909%" height="15" fill="rgb(208,67,9)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="757" width="0.0909%" height="15" fill="rgb(219,133,21)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="741" width="0.0909%" height="15" fill="rgb(246,46,29)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (86 samples, 0.09%)</title><rect x="21.5768%" y="725" width="0.0909%" height="15" fill="rgb(246,185,52)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86 samples, 0.09%)</title><rect x="21.5768%" y="709" width="0.0909%" height="15" fill="rgb(252,136,11)" fg:x="20406" fg:w="86"/><text x="21.8268%" y="719.50"></text></g><g><title>[unknown] (104 samples, 0.11%)</title><rect x="21.5768%" y="2053" width="0.1100%" height="15" fill="rgb(219,138,53)" fg:x="20406" fg:w="104"/><text x="21.8268%" y="2063.50"></text></g><g><title>uv__stream_io (10 samples, 0.01%)</title><rect x="21.7036%" y="1909" width="0.0106%" height="15" fill="rgb(211,51,23)" fg:x="20526" fg:w="10"/><text x="21.9536%" y="1919.50"></text></g><g><title>uv__read (10 samples, 0.01%)</title><rect x="21.7036%" y="1893" width="0.0106%" height="15" fill="rgb(247,221,28)" fg:x="20526" fg:w="10"/><text x="21.9536%" y="1903.50"></text></g><g><title>uv__io_poll (27 samples, 0.03%)</title><rect x="21.6867%" y="1925" width="0.0285%" height="15" fill="rgb(251,222,45)" fg:x="20510" fg:w="27"/><text x="21.9367%" y="1935.50"></text></g><g><title>_start (29 samples, 0.03%)</title><rect x="21.6867%" y="2053" width="0.0307%" height="15" fill="rgb(217,162,53)" fg:x="20510" fg:w="29"/><text x="21.9367%" y="2063.50"></text></g><g><title>__libc_start_main_impl (29 samples, 0.03%)</title><rect x="21.6867%" y="2037" width="0.0307%" height="15" fill="rgb(229,93,14)" fg:x="20510" fg:w="29"/><text x="21.9367%" y="2047.50"></text></g><g><title>__libc_start_call_main (29 samples, 0.03%)</title><rect x="21.6867%" y="2021" width="0.0307%" height="15" fill="rgb(209,67,49)" fg:x="20510" fg:w="29"/><text x="21.9367%" y="2031.50"></text></g><g><title>node::Start (29 samples, 0.03%)</title><rect x="21.6867%" y="2005" width="0.0307%" height="15" fill="rgb(213,87,29)" fg:x="20510" fg:w="29"/><text x="21.9367%" y="2015.50"></text></g><g><title>node::LoadSnapshotDataAndRun (29 samples, 0.03%)</title><rect x="21.6867%" y="1989" width="0.0307%" height="15" fill="rgb(205,151,52)" fg:x="20510" fg:w="29"/><text x="21.9367%" y="1999.50"></text></g><g><title>node::NodeMainInstance::Run (29 samples, 0.03%)</title><rect x="21.6867%" y="1973" width="0.0307%" height="15" fill="rgb(253,215,39)" fg:x="20510" fg:w="29"/><text x="21.9367%" y="1983.50"></text></g><g><title>node::SpinEventLoop (29 samples, 0.03%)</title><rect x="21.6867%" y="1957" width="0.0307%" height="15" fill="rgb(221,220,41)" fg:x="20510" fg:w="29"/><text x="21.9367%" y="1967.50"></text></g><g><title>uv_run (29 samples, 0.03%)</title><rect x="21.6867%" y="1941" width="0.0307%" height="15" fill="rgb(218,133,21)" fg:x="20510" fg:w="29"/><text x="21.9367%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15 samples, 0.02%)</title><rect x="21.8316%" y="757" width="0.0159%" height="15" fill="rgb(221,193,43)" fg:x="20647" fg:w="15"/><text x="22.0816%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15 samples, 0.02%)</title><rect x="21.8316%" y="741" width="0.0159%" height="15" fill="rgb(240,128,52)" fg:x="20647" fg:w="15"/><text x="22.0816%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (15 samples, 0.02%)</title><rect x="21.8316%" y="725" width="0.0159%" height="15" fill="rgb(253,114,12)" fg:x="20647" fg:w="15"/><text x="22.0816%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15 samples, 0.02%)</title><rect x="21.8316%" y="709" width="0.0159%" height="15" fill="rgb(215,223,47)" fg:x="20647" fg:w="15"/><text x="22.0816%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (11 samples, 0.01%)</title><rect x="21.8358%" y="693" width="0.0116%" height="15" fill="rgb(248,225,23)" fg:x="20651" fg:w="11"/><text x="22.0858%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.03%)</title><rect x="21.8305%" y="821" width="0.0264%" height="15" fill="rgb(250,108,0)" fg:x="20646" fg:w="25"/><text x="22.0805%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.03%)</title><rect x="21.8305%" y="805" width="0.0264%" height="15" fill="rgb(228,208,7)" fg:x="20646" fg:w="25"/><text x="22.0805%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="21.8316%" y="789" width="0.0254%" height="15" fill="rgb(244,45,10)" fg:x="20647" fg:w="24"/><text x="22.0816%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="21.8316%" y="773" width="0.0254%" height="15" fill="rgb(207,125,25)" fg:x="20647" fg:w="24"/><text x="22.0816%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (39 samples, 0.04%)</title><rect x="21.8263%" y="885" width="0.0412%" height="15" fill="rgb(210,195,18)" fg:x="20642" fg:w="39"/><text x="22.0763%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (39 samples, 0.04%)</title><rect x="21.8263%" y="869" width="0.0412%" height="15" fill="rgb(249,80,12)" fg:x="20642" fg:w="39"/><text x="22.0763%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (37 samples, 0.04%)</title><rect x="21.8284%" y="853" width="0.0391%" height="15" fill="rgb(221,65,9)" fg:x="20644" fg:w="37"/><text x="22.0784%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36 samples, 0.04%)</title><rect x="21.8295%" y="837" width="0.0381%" height="15" fill="rgb(235,49,36)" fg:x="20645" fg:w="36"/><text x="22.0795%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (10 samples, 0.01%)</title><rect x="21.8570%" y="821" width="0.0106%" height="15" fill="rgb(225,32,20)" fg:x="20671" fg:w="10"/><text x="22.1070%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (53 samples, 0.06%)</title><rect x="21.8221%" y="949" width="0.0560%" height="15" fill="rgb(215,141,46)" fg:x="20638" fg:w="53"/><text x="22.0721%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (51 samples, 0.05%)</title><rect x="21.8242%" y="933" width="0.0539%" height="15" fill="rgb(250,160,47)" fg:x="20640" fg:w="51"/><text x="22.0742%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (50 samples, 0.05%)</title><rect x="21.8252%" y="917" width="0.0529%" height="15" fill="rgb(216,222,40)" fg:x="20641" fg:w="50"/><text x="22.0752%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (50 samples, 0.05%)</title><rect x="21.8252%" y="901" width="0.0529%" height="15" fill="rgb(234,217,39)" fg:x="20641" fg:w="50"/><text x="22.0752%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (10 samples, 0.01%)</title><rect x="21.8675%" y="885" width="0.0106%" height="15" fill="rgb(207,178,40)" fg:x="20681" fg:w="10"/><text x="22.1175%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (67 samples, 0.07%)</title><rect x="21.8189%" y="1013" width="0.0708%" height="15" fill="rgb(221,136,13)" fg:x="20635" fg:w="67"/><text x="22.0689%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (67 samples, 0.07%)</title><rect x="21.8189%" y="997" width="0.0708%" height="15" fill="rgb(249,199,10)" fg:x="20635" fg:w="67"/><text x="22.0689%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (64 samples, 0.07%)</title><rect x="21.8221%" y="981" width="0.0677%" height="15" fill="rgb(249,222,13)" fg:x="20638" fg:w="64"/><text x="22.0721%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (64 samples, 0.07%)</title><rect x="21.8221%" y="965" width="0.0677%" height="15" fill="rgb(244,185,38)" fg:x="20638" fg:w="64"/><text x="22.0721%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (11 samples, 0.01%)</title><rect x="21.8781%" y="949" width="0.0116%" height="15" fill="rgb(236,202,9)" fg:x="20691" fg:w="11"/><text x="22.1281%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (83 samples, 0.09%)</title><rect x="21.8168%" y="1077" width="0.0878%" height="15" fill="rgb(250,229,37)" fg:x="20633" fg:w="83"/><text x="22.0668%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (82 samples, 0.09%)</title><rect x="21.8178%" y="1061" width="0.0867%" height="15" fill="rgb(206,174,23)" fg:x="20634" fg:w="82"/><text x="22.0678%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (82 samples, 0.09%)</title><rect x="21.8178%" y="1045" width="0.0867%" height="15" fill="rgb(211,33,43)" fg:x="20634" fg:w="82"/><text x="22.0678%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (82 samples, 0.09%)</title><rect x="21.8178%" y="1029" width="0.0867%" height="15" fill="rgb(245,58,50)" fg:x="20634" fg:w="82"/><text x="22.0678%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (14 samples, 0.01%)</title><rect x="21.8897%" y="1013" width="0.0148%" height="15" fill="rgb(244,68,36)" fg:x="20702" fg:w="14"/><text x="22.1397%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (94 samples, 0.10%)</title><rect x="21.8115%" y="1141" width="0.0994%" height="15" fill="rgb(232,229,15)" fg:x="20628" fg:w="94"/><text x="22.0615%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (93 samples, 0.10%)</title><rect x="21.8125%" y="1125" width="0.0983%" height="15" fill="rgb(254,30,23)" fg:x="20629" fg:w="93"/><text x="22.0625%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (91 samples, 0.10%)</title><rect x="21.8147%" y="1109" width="0.0962%" height="15" fill="rgb(235,160,14)" fg:x="20631" fg:w="91"/><text x="22.0647%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (91 samples, 0.10%)</title><rect x="21.8147%" y="1093" width="0.0962%" height="15" fill="rgb(212,155,44)" fg:x="20631" fg:w="91"/><text x="22.0647%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (108 samples, 0.11%)</title><rect x="21.8094%" y="1205" width="0.1142%" height="15" fill="rgb(226,2,50)" fg:x="20626" fg:w="108"/><text x="22.0594%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (107 samples, 0.11%)</title><rect x="21.8104%" y="1189" width="0.1131%" height="15" fill="rgb(234,177,6)" fg:x="20627" fg:w="107"/><text x="22.0604%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (107 samples, 0.11%)</title><rect x="21.8104%" y="1173" width="0.1131%" height="15" fill="rgb(217,24,9)" fg:x="20627" fg:w="107"/><text x="22.0604%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (107 samples, 0.11%)</title><rect x="21.8104%" y="1157" width="0.1131%" height="15" fill="rgb(220,13,46)" fg:x="20627" fg:w="107"/><text x="22.0604%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (12 samples, 0.01%)</title><rect x="21.9109%" y="1141" width="0.0127%" height="15" fill="rgb(239,221,27)" fg:x="20722" fg:w="12"/><text x="22.1609%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (119 samples, 0.13%)</title><rect x="21.8073%" y="1269" width="0.1258%" height="15" fill="rgb(222,198,25)" fg:x="20624" fg:w="119"/><text x="22.0573%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (118 samples, 0.12%)</title><rect x="21.8083%" y="1253" width="0.1248%" height="15" fill="rgb(211,99,13)" fg:x="20625" fg:w="118"/><text x="22.0583%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (117 samples, 0.12%)</title><rect x="21.8094%" y="1237" width="0.1237%" height="15" fill="rgb(232,111,31)" fg:x="20626" fg:w="117"/><text x="22.0594%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (117 samples, 0.12%)</title><rect x="21.8094%" y="1221" width="0.1237%" height="15" fill="rgb(245,82,37)" fg:x="20626" fg:w="117"/><text x="22.0594%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (135 samples, 0.14%)</title><rect x="21.8030%" y="1333" width="0.1427%" height="15" fill="rgb(227,149,46)" fg:x="20620" fg:w="135"/><text x="22.0530%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (134 samples, 0.14%)</title><rect x="21.8041%" y="1317" width="0.1417%" height="15" fill="rgb(218,36,50)" fg:x="20621" fg:w="134"/><text x="22.0541%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (131 samples, 0.14%)</title><rect x="21.8073%" y="1301" width="0.1385%" height="15" fill="rgb(226,80,48)" fg:x="20624" fg:w="131"/><text x="22.0573%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (131 samples, 0.14%)</title><rect x="21.8073%" y="1285" width="0.1385%" height="15" fill="rgb(238,224,15)" fg:x="20624" fg:w="131"/><text x="22.0573%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (12 samples, 0.01%)</title><rect x="21.9331%" y="1269" width="0.0127%" height="15" fill="rgb(241,136,10)" fg:x="20743" fg:w="12"/><text x="22.1831%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (147 samples, 0.16%)</title><rect x="21.7988%" y="1397" width="0.1554%" height="15" fill="rgb(208,32,45)" fg:x="20616" fg:w="147"/><text x="22.0488%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (146 samples, 0.15%)</title><rect x="21.7999%" y="1381" width="0.1544%" height="15" fill="rgb(207,135,9)" fg:x="20617" fg:w="146"/><text x="22.0499%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (145 samples, 0.15%)</title><rect x="21.8009%" y="1365" width="0.1533%" height="15" fill="rgb(206,86,44)" fg:x="20618" fg:w="145"/><text x="22.0509%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (143 samples, 0.15%)</title><rect x="21.8030%" y="1349" width="0.1512%" height="15" fill="rgb(245,177,15)" fg:x="20620" fg:w="143"/><text x="22.0530%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (157 samples, 0.17%)</title><rect x="21.7956%" y="1461" width="0.1660%" height="15" fill="rgb(206,64,50)" fg:x="20613" fg:w="157"/><text x="22.0456%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (155 samples, 0.16%)</title><rect x="21.7977%" y="1445" width="0.1639%" height="15" fill="rgb(234,36,40)" fg:x="20615" fg:w="155"/><text x="22.0477%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (154 samples, 0.16%)</title><rect x="21.7988%" y="1429" width="0.1628%" height="15" fill="rgb(213,64,8)" fg:x="20616" fg:w="154"/><text x="22.0488%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (154 samples, 0.16%)</title><rect x="21.7988%" y="1413" width="0.1628%" height="15" fill="rgb(210,75,36)" fg:x="20616" fg:w="154"/><text x="22.0488%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (168 samples, 0.18%)</title><rect x="21.7935%" y="1525" width="0.1776%" height="15" fill="rgb(229,88,21)" fg:x="20611" fg:w="168"/><text x="22.0435%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (168 samples, 0.18%)</title><rect x="21.7935%" y="1509" width="0.1776%" height="15" fill="rgb(252,204,47)" fg:x="20611" fg:w="168"/><text x="22.0435%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (166 samples, 0.18%)</title><rect x="21.7956%" y="1493" width="0.1755%" height="15" fill="rgb(208,77,27)" fg:x="20613" fg:w="166"/><text x="22.0456%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (166 samples, 0.18%)</title><rect x="21.7956%" y="1477" width="0.1755%" height="15" fill="rgb(221,76,26)" fg:x="20613" fg:w="166"/><text x="22.0456%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (185 samples, 0.20%)</title><rect x="21.7882%" y="1589" width="0.1956%" height="15" fill="rgb(225,139,18)" fg:x="20606" fg:w="185"/><text x="22.0382%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (184 samples, 0.19%)</title><rect x="21.7893%" y="1573" width="0.1946%" height="15" fill="rgb(230,137,11)" fg:x="20607" fg:w="184"/><text x="22.0393%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (180 samples, 0.19%)</title><rect x="21.7935%" y="1557" width="0.1903%" height="15" fill="rgb(212,28,1)" fg:x="20611" fg:w="180"/><text x="22.0435%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (180 samples, 0.19%)</title><rect x="21.7935%" y="1541" width="0.1903%" height="15" fill="rgb(248,164,17)" fg:x="20611" fg:w="180"/><text x="22.0435%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (12 samples, 0.01%)</title><rect x="21.9712%" y="1525" width="0.0127%" height="15" fill="rgb(222,171,42)" fg:x="20779" fg:w="12"/><text x="22.2212%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (193 samples, 0.20%)</title><rect x="21.7861%" y="1653" width="0.2041%" height="15" fill="rgb(243,84,45)" fg:x="20604" fg:w="193"/><text x="22.0361%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (193 samples, 0.20%)</title><rect x="21.7861%" y="1637" width="0.2041%" height="15" fill="rgb(252,49,23)" fg:x="20604" fg:w="193"/><text x="22.0361%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (192 samples, 0.20%)</title><rect x="21.7872%" y="1621" width="0.2030%" height="15" fill="rgb(215,19,7)" fg:x="20605" fg:w="192"/><text x="22.0372%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (192 samples, 0.20%)</title><rect x="21.7872%" y="1605" width="0.2030%" height="15" fill="rgb(238,81,41)" fg:x="20605" fg:w="192"/><text x="22.0372%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (205 samples, 0.22%)</title><rect x="21.7829%" y="1717" width="0.2168%" height="15" fill="rgb(210,199,37)" fg:x="20601" fg:w="205"/><text x="22.0329%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (205 samples, 0.22%)</title><rect x="21.7829%" y="1701" width="0.2168%" height="15" fill="rgb(244,192,49)" fg:x="20601" fg:w="205"/><text x="22.0329%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (203 samples, 0.21%)</title><rect x="21.7851%" y="1685" width="0.2146%" height="15" fill="rgb(226,211,11)" fg:x="20603" fg:w="203"/><text x="22.0351%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (203 samples, 0.21%)</title><rect x="21.7851%" y="1669" width="0.2146%" height="15" fill="rgb(236,162,54)" fg:x="20603" fg:w="203"/><text x="22.0351%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (223 samples, 0.24%)</title><rect x="21.7787%" y="1781" width="0.2358%" height="15" fill="rgb(220,229,9)" fg:x="20597" fg:w="223"/><text x="22.0287%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (221 samples, 0.23%)</title><rect x="21.7808%" y="1765" width="0.2337%" height="15" fill="rgb(250,87,22)" fg:x="20599" fg:w="221"/><text x="22.0308%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (219 samples, 0.23%)</title><rect x="21.7829%" y="1749" width="0.2316%" height="15" fill="rgb(239,43,17)" fg:x="20601" fg:w="219"/><text x="22.0329%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (219 samples, 0.23%)</title><rect x="21.7829%" y="1733" width="0.2316%" height="15" fill="rgb(231,177,25)" fg:x="20601" fg:w="219"/><text x="22.0329%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (14 samples, 0.01%)</title><rect x="21.9997%" y="1717" width="0.0148%" height="15" fill="rgb(219,179,1)" fg:x="20806" fg:w="14"/><text x="22.2497%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (262 samples, 0.28%)</title><rect x="21.7607%" y="1877" width="0.2770%" height="15" fill="rgb(238,219,53)" fg:x="20580" fg:w="262"/><text x="22.0107%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (260 samples, 0.27%)</title><rect x="21.7629%" y="1861" width="0.2749%" height="15" fill="rgb(232,167,36)" fg:x="20582" fg:w="260"/><text x="22.0129%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (258 samples, 0.27%)</title><rect x="21.7650%" y="1845" width="0.2728%" height="15" fill="rgb(244,19,51)" fg:x="20584" fg:w="258"/><text x="22.0150%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (252 samples, 0.27%)</title><rect x="21.7713%" y="1829" width="0.2665%" height="15" fill="rgb(224,6,22)" fg:x="20590" fg:w="252"/><text x="22.0213%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (248 samples, 0.26%)</title><rect x="21.7755%" y="1813" width="0.2622%" height="15" fill="rgb(224,145,5)" fg:x="20594" fg:w="248"/><text x="22.0255%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (248 samples, 0.26%)</title><rect x="21.7755%" y="1797" width="0.2622%" height="15" fill="rgb(234,130,49)" fg:x="20594" fg:w="248"/><text x="22.0255%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (22 samples, 0.02%)</title><rect x="22.0145%" y="1781" width="0.0233%" height="15" fill="rgb(254,6,2)" fg:x="20820" fg:w="22"/><text x="22.2645%" y="1791.50"></text></g><g><title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;, (std::__detail::_RegexExecutorPolicy)0, true&gt; (285 samples, 0.30%)</title><rect x="21.7417%" y="1893" width="0.3014%" height="15" fill="rgb(208,96,46)" fg:x="20562" fg:w="285"/><text x="21.9917%" y="1903.50"></text></g><g><title>Glob::isIgnored (288 samples, 0.30%)</title><rect x="21.7396%" y="1909" width="0.3045%" height="15" fill="rgb(239,3,39)" fg:x="20560" fg:w="288"/><text x="21.9896%" y="1919.50"></text></g><g><title>Watcher::isIgnored (295 samples, 0.31%)</title><rect x="21.7343%" y="1925" width="0.3119%" height="15" fill="rgb(233,210,1)" fg:x="20555" fg:w="295"/><text x="21.9843%" y="1935.50"></text></g><g><title>link_path_walk.part.0 (11 samples, 0.01%)</title><rect x="22.0536%" y="1813" width="0.0116%" height="15" fill="rgb(244,137,37)" fg:x="20857" fg:w="11"/><text x="22.3036%" y="1823.50"></text></g><g><title>filename_lookup (15 samples, 0.02%)</title><rect x="22.0515%" y="1845" width="0.0159%" height="15" fill="rgb(240,136,2)" fg:x="20855" fg:w="15"/><text x="22.3015%" y="1855.50"></text></g><g><title>path_lookupat.isra.0 (14 samples, 0.01%)</title><rect x="22.0526%" y="1829" width="0.0148%" height="15" fill="rgb(239,18,37)" fg:x="20856" fg:w="14"/><text x="22.3026%" y="1839.50"></text></g><g><title>user_path_at_empty (10 samples, 0.01%)</title><rect x="22.0674%" y="1845" width="0.0106%" height="15" fill="rgb(218,185,22)" fg:x="20870" fg:w="10"/><text x="22.3174%" y="1855.50"></text></g><g><title>getname_flags (10 samples, 0.01%)</title><rect x="22.0674%" y="1829" width="0.0106%" height="15" fill="rgb(225,218,4)" fg:x="20870" fg:w="10"/><text x="22.3174%" y="1839.50"></text></g><g><title>__do_sys_newstat (30 samples, 0.03%)</title><rect x="22.0473%" y="1877" width="0.0317%" height="15" fill="rgb(230,182,32)" fg:x="20851" fg:w="30"/><text x="22.2973%" y="1887.50"></text></g><g><title>vfs_statx (27 samples, 0.03%)</title><rect x="22.0505%" y="1861" width="0.0285%" height="15" fill="rgb(242,56,43)" fg:x="20854" fg:w="27"/><text x="22.3005%" y="1871.50"></text></g><g><title>___xstat64 (32 samples, 0.03%)</title><rect x="22.0473%" y="1925" width="0.0338%" height="15" fill="rgb(233,99,24)" fg:x="20851" fg:w="32"/><text x="22.2973%" y="1935.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (32 samples, 0.03%)</title><rect x="22.0473%" y="1909" width="0.0338%" height="15" fill="rgb(234,209,42)" fg:x="20851" fg:w="32"/><text x="22.2973%" y="1919.50"></text></g><g><title>do_syscall_64 (32 samples, 0.03%)</title><rect x="22.0473%" y="1893" width="0.0338%" height="15" fill="rgb(227,7,12)" fg:x="20851" fg:w="32"/><text x="22.2973%" y="1903.50"></text></g><g><title>InotifyBackend::handleSubscription (350 samples, 0.37%)</title><rect x="21.7248%" y="1941" width="0.3701%" height="15" fill="rgb(245,203,43)" fg:x="20546" fg:w="350"/><text x="21.9748%" y="1951.50"></text></g><g><title>InotifyBackend::handleEvent (385 samples, 0.41%)</title><rect x="21.7216%" y="1957" width="0.4071%" height="15" fill="rgb(238,205,33)" fg:x="20543" fg:w="385"/><text x="21.9716%" y="1967.50"></text></g><g><title>std::_Hashtable&lt;std::shared_ptr&lt;InotifySubscription&gt;, std::shared_ptr&lt;InotifySubscription&gt;, std::allocator&lt;std::shared_ptr&lt;InotifySubscription&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;InotifySubscription&gt; &gt;, std::hash&lt;std::shared_ptr&lt;InotifySubscription&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (11 samples, 0.01%)</title><rect x="22.1171%" y="1941" width="0.0116%" height="15" fill="rgb(231,56,7)" fg:x="20917" fg:w="11"/><text x="22.3671%" y="1951.50"></text></g><g><title>do_syscall_64 (124 samples, 0.13%)</title><rect x="22.1372%" y="1893" width="0.1311%" height="15" fill="rgb(244,186,29)" fg:x="20936" fg:w="124"/><text x="22.3872%" y="1903.50"></text></g><g><title>__x64_sys_futex (124 samples, 0.13%)</title><rect x="22.1372%" y="1877" width="0.1311%" height="15" fill="rgb(234,111,31)" fg:x="20936" fg:w="124"/><text x="22.3872%" y="1887.50"></text></g><g><title>do_futex (124 samples, 0.13%)</title><rect x="22.1372%" y="1861" width="0.1311%" height="15" fill="rgb(241,149,10)" fg:x="20936" fg:w="124"/><text x="22.3872%" y="1871.50"></text></g><g><title>futex_wake (123 samples, 0.13%)</title><rect x="22.1382%" y="1845" width="0.1301%" height="15" fill="rgb(249,206,44)" fg:x="20937" fg:w="123"/><text x="22.3882%" y="1855.50"></text></g><g><title>wake_up_q (122 samples, 0.13%)</title><rect x="22.1393%" y="1829" width="0.1290%" height="15" fill="rgb(251,153,30)" fg:x="20938" fg:w="122"/><text x="22.3893%" y="1839.50"></text></g><g><title>try_to_wake_up (120 samples, 0.13%)</title><rect x="22.1414%" y="1813" width="0.1269%" height="15" fill="rgb(239,152,38)" fg:x="20940" fg:w="120"/><text x="22.3914%" y="1823.50"></text></g><g><title>__lock_text_start (120 samples, 0.13%)</title><rect x="22.1414%" y="1797" width="0.1269%" height="15" fill="rgb(249,139,47)" fg:x="20940" fg:w="120"/><text x="22.3914%" y="1807.50"></text></g><g><title>___pthread_cond_broadcast (127 samples, 0.13%)</title><rect x="22.1350%" y="1941" width="0.1343%" height="15" fill="rgb(244,64,35)" fg:x="20934" fg:w="127"/><text x="22.3850%" y="1951.50"></text></g><g><title>futex_wake (126 samples, 0.13%)</title><rect x="22.1361%" y="1925" width="0.1332%" height="15" fill="rgb(216,46,15)" fg:x="20935" fg:w="126"/><text x="22.3861%" y="1935.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (125 samples, 0.13%)</title><rect x="22.1372%" y="1909" width="0.1322%" height="15" fill="rgb(250,74,19)" fg:x="20936" fg:w="125"/><text x="22.3872%" y="1919.50"></text></g><g><title>Watcher::notify (136 samples, 0.14%)</title><rect x="22.1298%" y="1957" width="0.1438%" height="15" fill="rgb(249,42,33)" fg:x="20929" fg:w="136"/><text x="22.3798%" y="1967.50"></text></g><g><title>inotify_read (15 samples, 0.02%)</title><rect x="22.2863%" y="1861" width="0.0159%" height="15" fill="rgb(242,149,17)" fg:x="21077" fg:w="15"/><text x="22.5363%" y="1871.50"></text></g><g><title>__GI___libc_read (26 samples, 0.03%)</title><rect x="22.2757%" y="1957" width="0.0275%" height="15" fill="rgb(244,29,21)" fg:x="21067" fg:w="26"/><text x="22.5257%" y="1967.50"></text></g><g><title>__GI___libc_read (25 samples, 0.03%)</title><rect x="22.2767%" y="1941" width="0.0264%" height="15" fill="rgb(220,130,37)" fg:x="21068" fg:w="25"/><text x="22.5267%" y="1951.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (22 samples, 0.02%)</title><rect x="22.2799%" y="1925" width="0.0233%" height="15" fill="rgb(211,67,2)" fg:x="21071" fg:w="22"/><text x="22.5299%" y="1935.50"></text></g><g><title>do_syscall_64 (22 samples, 0.02%)</title><rect x="22.2799%" y="1909" width="0.0233%" height="15" fill="rgb(235,68,52)" fg:x="21071" fg:w="22"/><text x="22.5299%" y="1919.50"></text></g><g><title>ksys_read (20 samples, 0.02%)</title><rect x="22.2820%" y="1893" width="0.0211%" height="15" fill="rgb(246,142,3)" fg:x="21073" fg:w="20"/><text x="22.5320%" y="1903.50"></text></g><g><title>vfs_read (19 samples, 0.02%)</title><rect x="22.2831%" y="1877" width="0.0201%" height="15" fill="rgb(241,25,7)" fg:x="21074" fg:w="19"/><text x="22.5331%" y="1887.50"></text></g><g><title>InotifyBackend::handleEvents (555 samples, 0.59%)</title><rect x="21.7184%" y="1973" width="0.5868%" height="15" fill="rgb(242,119,39)" fg:x="20540" fg:w="555"/><text x="21.9684%" y="1983.50"></text></g><g><title>do_sys_poll (31 samples, 0.03%)</title><rect x="22.3127%" y="1909" width="0.0328%" height="15" fill="rgb(241,98,45)" fg:x="21102" fg:w="31"/><text x="22.5627%" y="1919.50"></text></g><g><title>poll_schedule_timeout.constprop.0 (21 samples, 0.02%)</title><rect x="22.3233%" y="1893" width="0.0222%" height="15" fill="rgb(254,28,30)" fg:x="21112" fg:w="21"/><text x="22.5733%" y="1903.50"></text></g><g><title>schedule_hrtimeout_range_clock (21 samples, 0.02%)</title><rect x="22.3233%" y="1877" width="0.0222%" height="15" fill="rgb(241,142,54)" fg:x="21112" fg:w="21"/><text x="22.5733%" y="1887.50"></text></g><g><title>schedule (18 samples, 0.02%)</title><rect x="22.3264%" y="1861" width="0.0190%" height="15" fill="rgb(222,85,15)" fg:x="21115" fg:w="18"/><text x="22.5764%" y="1871.50"></text></g><g><title>__sched_text_start (18 samples, 0.02%)</title><rect x="22.3264%" y="1845" width="0.0190%" height="15" fill="rgb(210,85,47)" fg:x="21115" fg:w="18"/><text x="22.5764%" y="1855.50"></text></g><g><title>finish_task_switch (18 samples, 0.02%)</title><rect x="22.3264%" y="1829" width="0.0190%" height="15" fill="rgb(224,206,25)" fg:x="21115" fg:w="18"/><text x="22.5764%" y="1839.50"></text></g><g><title>do_syscall_64 (35 samples, 0.04%)</title><rect x="22.3095%" y="1941" width="0.0370%" height="15" fill="rgb(243,201,19)" fg:x="21099" fg:w="35"/><text x="22.5595%" y="1951.50"></text></g><g><title>__x64_sys_poll (34 samples, 0.04%)</title><rect x="22.3106%" y="1925" width="0.0360%" height="15" fill="rgb(236,59,4)" fg:x="21100" fg:w="34"/><text x="22.5606%" y="1935.50"></text></g><g><title>__GI___poll (44 samples, 0.05%)</title><rect x="22.3063%" y="1973" width="0.0465%" height="15" fill="rgb(254,179,45)" fg:x="21096" fg:w="44"/><text x="22.5563%" y="1983.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (41 samples, 0.04%)</title><rect x="22.3095%" y="1957" width="0.0434%" height="15" fill="rgb(226,14,10)" fg:x="21099" fg:w="41"/><text x="22.5595%" y="1967.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Backend::run()::{lambda()#1}&gt; &gt; &gt;::_M_run (602 samples, 0.64%)</title><rect x="21.7174%" y="2005" width="0.6365%" height="15" fill="rgb(244,27,41)" fg:x="20539" fg:w="602"/><text x="21.9674%" y="2015.50"></text></g><g><title>InotifyBackend::start (602 samples, 0.64%)</title><rect x="21.7174%" y="1989" width="0.6365%" height="15" fill="rgb(235,35,32)" fg:x="20539" fg:w="602"/><text x="21.9674%" y="1999.50"></text></g><g><title>futex_wait_queue_me (15 samples, 0.02%)</title><rect x="22.3656%" y="1845" width="0.0159%" height="15" fill="rgb(218,68,31)" fg:x="21152" fg:w="15"/><text x="22.6156%" y="1855.50"></text></g><g><title>schedule (14 samples, 0.01%)</title><rect x="22.3666%" y="1829" width="0.0148%" height="15" fill="rgb(207,120,37)" fg:x="21153" fg:w="14"/><text x="22.6166%" y="1839.50"></text></g><g><title>__sched_text_start (13 samples, 0.01%)</title><rect x="22.3677%" y="1813" width="0.0137%" height="15" fill="rgb(227,98,0)" fg:x="21154" fg:w="13"/><text x="22.6177%" y="1823.50"></text></g><g><title>finish_task_switch (13 samples, 0.01%)</title><rect x="22.3677%" y="1797" width="0.0137%" height="15" fill="rgb(207,7,3)" fg:x="21154" fg:w="13"/><text x="22.6177%" y="1807.50"></text></g><g><title>do_futex (19 samples, 0.02%)</title><rect x="22.3634%" y="1877" width="0.0201%" height="15" fill="rgb(206,98,19)" fg:x="21150" fg:w="19"/><text x="22.6134%" y="1887.50"></text></g><g><title>futex_wait (17 samples, 0.02%)</title><rect x="22.3656%" y="1861" width="0.0180%" height="15" fill="rgb(217,5,26)" fg:x="21152" fg:w="17"/><text x="22.6156%" y="1871.50"></text></g><g><title>do_syscall_64 (20 samples, 0.02%)</title><rect x="22.3634%" y="1909" width="0.0211%" height="15" fill="rgb(235,190,38)" fg:x="21150" fg:w="20"/><text x="22.6134%" y="1919.50"></text></g><g><title>__x64_sys_futex (20 samples, 0.02%)</title><rect x="22.3634%" y="1893" width="0.0211%" height="15" fill="rgb(247,86,24)" fg:x="21150" fg:w="20"/><text x="22.6134%" y="1903.50"></text></g><g><title>___pthread_cond_timedwait64 (30 samples, 0.03%)</title><rect x="22.3571%" y="1989" width="0.0317%" height="15" fill="rgb(205,101,16)" fg:x="21144" fg:w="30"/><text x="22.6071%" y="1999.50"></text></g><g><title>__pthread_cond_wait_common (29 samples, 0.03%)</title><rect x="22.3582%" y="1973" width="0.0307%" height="15" fill="rgb(246,168,33)" fg:x="21145" fg:w="29"/><text x="22.6082%" y="1983.50"></text></g><g><title>__futex_abstimed_wait_common (27 samples, 0.03%)</title><rect x="22.3603%" y="1957" width="0.0285%" height="15" fill="rgb(231,114,1)" fg:x="21147" fg:w="27"/><text x="22.6103%" y="1967.50"></text></g><g><title>__futex_abstimed_wait_common64 (27 samples, 0.03%)</title><rect x="22.3603%" y="1941" width="0.0285%" height="15" fill="rgb(207,184,53)" fg:x="21147" fg:w="27"/><text x="22.6103%" y="1951.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (24 samples, 0.03%)</title><rect x="22.3634%" y="1925" width="0.0254%" height="15" fill="rgb(224,95,51)" fg:x="21150" fg:w="24"/><text x="22.6134%" y="1935.50"></text></g><g><title>[libstdc++.so.6.0.30] (649 samples, 0.69%)</title><rect x="21.7174%" y="2021" width="0.6862%" height="15" fill="rgb(212,188,45)" fg:x="20539" fg:w="649"/><text x="21.9674%" y="2031.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Debounce::Debounce()::{lambda()#1}&gt; &gt; &gt;::_M_run (47 samples, 0.05%)</title><rect x="22.3539%" y="2005" width="0.0497%" height="15" fill="rgb(223,154,38)" fg:x="21141" fg:w="47"/><text x="22.6039%" y="2015.50"></text></g><g><title>uv_async_send (14 samples, 0.01%)</title><rect x="22.4131%" y="2005" width="0.0148%" height="15" fill="rgb(251,22,52)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="2015.50"></text></g><g><title>uv__async_send (14 samples, 0.01%)</title><rect x="22.4131%" y="1989" width="0.0148%" height="15" fill="rgb(229,209,22)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="1999.50"></text></g><g><title>__GI___libc_write (14 samples, 0.01%)</title><rect x="22.4131%" y="1973" width="0.0148%" height="15" fill="rgb(234,138,34)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="1983.50"></text></g><g><title>__GI___libc_write (14 samples, 0.01%)</title><rect x="22.4131%" y="1957" width="0.0148%" height="15" fill="rgb(212,95,11)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="1967.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.01%)</title><rect x="22.4131%" y="1941" width="0.0148%" height="15" fill="rgb(240,179,47)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="1951.50"></text></g><g><title>do_syscall_64 (14 samples, 0.01%)</title><rect x="22.4131%" y="1925" width="0.0148%" height="15" fill="rgb(240,163,11)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="1935.50"></text></g><g><title>ksys_write (14 samples, 0.01%)</title><rect x="22.4131%" y="1909" width="0.0148%" height="15" fill="rgb(236,37,12)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="1919.50"></text></g><g><title>vfs_write (14 samples, 0.01%)</title><rect x="22.4131%" y="1893" width="0.0148%" height="15" fill="rgb(232,164,16)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="1903.50"></text></g><g><title>eventfd_write (14 samples, 0.01%)</title><rect x="22.4131%" y="1877" width="0.0148%" height="15" fill="rgb(244,205,15)" fg:x="21197" fg:w="14"/><text x="22.6631%" y="1887.50"></text></g><g><title>clone3 (679 samples, 0.72%)</title><rect x="21.7174%" y="2053" width="0.7180%" height="15" fill="rgb(223,117,47)" fg:x="20539" fg:w="679"/><text x="21.9674%" y="2063.50"></text></g><g><title>start_thread (679 samples, 0.72%)</title><rect x="21.7174%" y="2037" width="0.7180%" height="15" fill="rgb(244,107,35)" fg:x="20539" fg:w="679"/><text x="21.9674%" y="2047.50"></text></g><g><title>worker (28 samples, 0.03%)</title><rect x="22.4057%" y="2021" width="0.0296%" height="15" fill="rgb(205,140,8)" fg:x="21190" fg:w="28"/><text x="22.6557%" y="2031.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (20 samples, 0.02%)</title><rect x="22.4353%" y="2053" width="0.0211%" height="15" fill="rgb(228,84,46)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="2063.50"></text></g><g><title>do_syscall_64 (20 samples, 0.02%)</title><rect x="22.4353%" y="2037" width="0.0211%" height="15" fill="rgb(254,188,9)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="2047.50"></text></g><g><title>__x64_sys_execve (20 samples, 0.02%)</title><rect x="22.4353%" y="2021" width="0.0211%" height="15" fill="rgb(206,112,54)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="2031.50"></text></g><g><title>do_execveat_common.isra.0 (20 samples, 0.02%)</title><rect x="22.4353%" y="2005" width="0.0211%" height="15" fill="rgb(216,84,49)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="2015.50"></text></g><g><title>bprm_execve (20 samples, 0.02%)</title><rect x="22.4353%" y="1989" width="0.0211%" height="15" fill="rgb(214,194,35)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="1999.50"></text></g><g><title>load_elf_binary (20 samples, 0.02%)</title><rect x="22.4353%" y="1973" width="0.0211%" height="15" fill="rgb(249,28,3)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="1983.50"></text></g><g><title>begin_new_exec (20 samples, 0.02%)</title><rect x="22.4353%" y="1957" width="0.0211%" height="15" fill="rgb(222,56,52)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="1967.50"></text></g><g><title>mmput (20 samples, 0.02%)</title><rect x="22.4353%" y="1941" width="0.0211%" height="15" fill="rgb(245,217,50)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="1951.50"></text></g><g><title>exit_mmap (20 samples, 0.02%)</title><rect x="22.4353%" y="1925" width="0.0211%" height="15" fill="rgb(213,201,24)" fg:x="21218" fg:w="20"/><text x="22.6853%" y="1935.50"></text></g><g><title>unmap_vmas (17 samples, 0.02%)</title><rect x="22.4385%" y="1909" width="0.0180%" height="15" fill="rgb(248,116,28)" fg:x="21221" fg:w="17"/><text x="22.6885%" y="1919.50"></text></g><g><title>unmap_page_range (17 samples, 0.02%)</title><rect x="22.4385%" y="1893" width="0.0180%" height="15" fill="rgb(219,72,43)" fg:x="21221" fg:w="17"/><text x="22.6885%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.4618%" y="117" width="0.0233%" height="15" fill="rgb(209,138,14)" fg:x="21243" fg:w="22"/><text x="22.7118%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.4618%" y="101" width="0.0233%" height="15" fill="rgb(222,18,33)" fg:x="21243" fg:w="22"/><text x="22.7118%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.4618%" y="85" width="0.0233%" height="15" fill="rgb(213,199,7)" fg:x="21243" fg:w="22"/><text x="22.7118%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.4618%" y="69" width="0.0233%" height="15" fill="rgb(250,110,10)" fg:x="21243" fg:w="22"/><text x="22.7118%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (21 samples, 0.02%)</title><rect x="22.4628%" y="53" width="0.0222%" height="15" fill="rgb(248,123,6)" fg:x="21244" fg:w="21"/><text x="22.7128%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.4586%" y="2021" width="0.0285%" height="15" fill="rgb(206,91,31)" fg:x="21240" fg:w="27"/><text x="22.7086%" y="2031.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="2005" width="0.0254%" height="15" fill="rgb(211,154,13)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1989" width="0.0254%" height="15" fill="rgb(225,148,7)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1973" width="0.0254%" height="15" fill="rgb(220,160,43)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1957" width="0.0254%" height="15" fill="rgb(213,52,39)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1941" width="0.0254%" height="15" fill="rgb(243,137,7)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1925" width="0.0254%" height="15" fill="rgb(230,79,13)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1909" width="0.0254%" height="15" fill="rgb(247,105,23)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1893" width="0.0254%" height="15" fill="rgb(223,179,41)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1877" width="0.0254%" height="15" fill="rgb(218,9,34)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1861" width="0.0254%" height="15" fill="rgb(222,106,8)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1845" width="0.0254%" height="15" fill="rgb(211,220,0)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1829" width="0.0254%" height="15" fill="rgb(229,52,16)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1813" width="0.0254%" height="15" fill="rgb(212,155,18)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1797" width="0.0254%" height="15" fill="rgb(242,21,14)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1781" width="0.0254%" height="15" fill="rgb(222,19,48)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1765" width="0.0254%" height="15" fill="rgb(232,45,27)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1749" width="0.0254%" height="15" fill="rgb(249,103,42)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1733" width="0.0254%" height="15" fill="rgb(246,81,33)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1717" width="0.0254%" height="15" fill="rgb(252,33,42)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1701" width="0.0254%" height="15" fill="rgb(209,212,41)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1685" width="0.0254%" height="15" fill="rgb(207,154,6)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1669" width="0.0254%" height="15" fill="rgb(223,64,47)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1653" width="0.0254%" height="15" fill="rgb(211,161,38)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1637" width="0.0254%" height="15" fill="rgb(219,138,40)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1621" width="0.0254%" height="15" fill="rgb(241,228,46)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1605" width="0.0254%" height="15" fill="rgb(223,209,38)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1589" width="0.0254%" height="15" fill="rgb(236,164,45)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1573" width="0.0254%" height="15" fill="rgb(231,15,5)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1557" width="0.0254%" height="15" fill="rgb(252,35,15)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1541" width="0.0254%" height="15" fill="rgb(248,181,18)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1525" width="0.0254%" height="15" fill="rgb(233,39,42)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1509" width="0.0254%" height="15" fill="rgb(238,110,33)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1493" width="0.0254%" height="15" fill="rgb(233,195,10)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1477" width="0.0254%" height="15" fill="rgb(254,105,3)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1461" width="0.0254%" height="15" fill="rgb(221,225,9)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1445" width="0.0254%" height="15" fill="rgb(224,227,45)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1429" width="0.0254%" height="15" fill="rgb(229,198,43)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1413" width="0.0254%" height="15" fill="rgb(206,209,35)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1397" width="0.0254%" height="15" fill="rgb(245,195,53)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1381" width="0.0254%" height="15" fill="rgb(240,92,26)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1365" width="0.0254%" height="15" fill="rgb(207,40,23)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1349" width="0.0254%" height="15" fill="rgb(223,111,35)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1333" width="0.0254%" height="15" fill="rgb(229,147,28)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1317" width="0.0254%" height="15" fill="rgb(211,29,28)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1301" width="0.0254%" height="15" fill="rgb(228,72,33)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1285" width="0.0254%" height="15" fill="rgb(205,214,31)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1269" width="0.0254%" height="15" fill="rgb(224,111,15)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1253" width="0.0254%" height="15" fill="rgb(253,21,26)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1237" width="0.0254%" height="15" fill="rgb(245,139,43)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1221" width="0.0254%" height="15" fill="rgb(252,170,7)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1205" width="0.0254%" height="15" fill="rgb(231,118,14)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1189" width="0.0254%" height="15" fill="rgb(238,83,0)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1173" width="0.0254%" height="15" fill="rgb(221,39,39)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1157" width="0.0254%" height="15" fill="rgb(222,119,46)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1141" width="0.0254%" height="15" fill="rgb(222,165,49)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1125" width="0.0254%" height="15" fill="rgb(219,113,52)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1109" width="0.0254%" height="15" fill="rgb(214,7,15)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1093" width="0.0254%" height="15" fill="rgb(235,32,4)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1077" width="0.0254%" height="15" fill="rgb(238,90,54)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1061" width="0.0254%" height="15" fill="rgb(213,208,19)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="1045" width="0.0254%" height="15" fill="rgb(233,156,4)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1029" width="0.0254%" height="15" fill="rgb(207,194,5)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="1013" width="0.0254%" height="15" fill="rgb(206,111,30)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="997" width="0.0254%" height="15" fill="rgb(243,70,54)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="981" width="0.0254%" height="15" fill="rgb(242,28,8)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="965" width="0.0254%" height="15" fill="rgb(219,106,18)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="949" width="0.0254%" height="15" fill="rgb(244,222,10)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="933" width="0.0254%" height="15" fill="rgb(236,179,52)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="917" width="0.0254%" height="15" fill="rgb(213,23,39)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="901" width="0.0254%" height="15" fill="rgb(238,48,10)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="885" width="0.0254%" height="15" fill="rgb(251,196,23)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="869" width="0.0254%" height="15" fill="rgb(250,152,24)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="853" width="0.0254%" height="15" fill="rgb(209,150,17)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="837" width="0.0254%" height="15" fill="rgb(234,202,34)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="821" width="0.0254%" height="15" fill="rgb(253,148,53)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="805" width="0.0254%" height="15" fill="rgb(218,129,16)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="789" width="0.0254%" height="15" fill="rgb(216,85,19)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="773" width="0.0254%" height="15" fill="rgb(235,228,7)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="757" width="0.0254%" height="15" fill="rgb(245,175,0)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="741" width="0.0254%" height="15" fill="rgb(208,168,36)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="725" width="0.0254%" height="15" fill="rgb(246,171,24)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="709" width="0.0254%" height="15" fill="rgb(215,142,24)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="693" width="0.0254%" height="15" fill="rgb(250,187,7)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="677" width="0.0254%" height="15" fill="rgb(228,66,33)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="661" width="0.0254%" height="15" fill="rgb(234,215,21)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="645" width="0.0254%" height="15" fill="rgb(222,191,20)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="629" width="0.0254%" height="15" fill="rgb(245,79,54)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="613" width="0.0254%" height="15" fill="rgb(240,10,37)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="597" width="0.0254%" height="15" fill="rgb(214,192,32)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="581" width="0.0254%" height="15" fill="rgb(209,36,54)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="565" width="0.0254%" height="15" fill="rgb(220,10,11)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="549" width="0.0254%" height="15" fill="rgb(221,106,17)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="533" width="0.0254%" height="15" fill="rgb(251,142,44)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="517" width="0.0254%" height="15" fill="rgb(238,13,15)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="501" width="0.0254%" height="15" fill="rgb(208,107,27)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="485" width="0.0254%" height="15" fill="rgb(205,136,37)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="469" width="0.0254%" height="15" fill="rgb(250,205,27)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="453" width="0.0254%" height="15" fill="rgb(210,80,43)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="437" width="0.0254%" height="15" fill="rgb(247,160,36)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="421" width="0.0254%" height="15" fill="rgb(234,13,49)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="405" width="0.0254%" height="15" fill="rgb(234,122,0)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="389" width="0.0254%" height="15" fill="rgb(207,146,38)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="373" width="0.0254%" height="15" fill="rgb(207,177,25)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="357" width="0.0254%" height="15" fill="rgb(211,178,42)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="341" width="0.0254%" height="15" fill="rgb(230,69,54)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="325" width="0.0254%" height="15" fill="rgb(214,135,41)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="309" width="0.0254%" height="15" fill="rgb(237,67,25)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="293" width="0.0254%" height="15" fill="rgb(222,189,50)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="277" width="0.0254%" height="15" fill="rgb(245,148,34)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="261" width="0.0254%" height="15" fill="rgb(222,29,6)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="245" width="0.0254%" height="15" fill="rgb(221,189,43)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="229" width="0.0254%" height="15" fill="rgb(207,36,27)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="213" width="0.0254%" height="15" fill="rgb(217,90,24)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="197" width="0.0254%" height="15" fill="rgb(224,66,35)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="181" width="0.0254%" height="15" fill="rgb(221,13,50)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="165" width="0.0254%" height="15" fill="rgb(236,68,49)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.4618%" y="149" width="0.0254%" height="15" fill="rgb(229,146,28)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.4618%" y="133" width="0.0254%" height="15" fill="rgb(225,31,38)" fg:x="21243" fg:w="24"/><text x="22.7118%" y="143.50"></text></g><g><title>__GI___libc_free (16 samples, 0.02%)</title><rect x="22.4914%" y="53" width="0.0169%" height="15" fill="rgb(250,208,3)" fg:x="21271" fg:w="16"/><text x="22.7414%" y="63.50"></text></g><g><title>_int_free (16 samples, 0.02%)</title><rect x="22.4914%" y="37" width="0.0169%" height="15" fill="rgb(246,54,23)" fg:x="21271" fg:w="16"/><text x="22.7414%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.01%)</title><rect x="22.5178%" y="53" width="0.0116%" height="15" fill="rgb(243,76,11)" fg:x="21296" fg:w="11"/><text x="22.7678%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.01%)</title><rect x="22.5178%" y="37" width="0.0116%" height="15" fill="rgb(245,21,50)" fg:x="21296" fg:w="11"/><text x="22.7678%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41 samples, 0.04%)</title><rect x="22.4872%" y="133" width="0.0434%" height="15" fill="rgb(228,9,43)" fg:x="21267" fg:w="41"/><text x="22.7372%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41 samples, 0.04%)</title><rect x="22.4872%" y="117" width="0.0434%" height="15" fill="rgb(208,100,47)" fg:x="21267" fg:w="41"/><text x="22.7372%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (41 samples, 0.04%)</title><rect x="22.4872%" y="101" width="0.0434%" height="15" fill="rgb(232,26,8)" fg:x="21267" fg:w="41"/><text x="22.7372%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41 samples, 0.04%)</title><rect x="22.4872%" y="85" width="0.0434%" height="15" fill="rgb(216,166,38)" fg:x="21267" fg:w="41"/><text x="22.7372%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (37 samples, 0.04%)</title><rect x="22.4914%" y="69" width="0.0391%" height="15" fill="rgb(251,202,51)" fg:x="21271" fg:w="37"/><text x="22.7414%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (71 samples, 0.08%)</title><rect x="22.4565%" y="2037" width="0.0751%" height="15" fill="rgb(254,216,34)" fg:x="21238" fg:w="71"/><text x="22.7065%" y="2047.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="2021" width="0.0444%" height="15" fill="rgb(251,32,27)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="2031.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="2005" width="0.0444%" height="15" fill="rgb(208,127,28)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1989" width="0.0444%" height="15" fill="rgb(224,137,22)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1973" width="0.0444%" height="15" fill="rgb(254,70,32)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1957" width="0.0444%" height="15" fill="rgb(229,75,37)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1941" width="0.0444%" height="15" fill="rgb(252,64,23)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1925" width="0.0444%" height="15" fill="rgb(232,162,48)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1909" width="0.0444%" height="15" fill="rgb(246,160,12)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1893" width="0.0444%" height="15" fill="rgb(247,166,0)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1877" width="0.0444%" height="15" fill="rgb(249,219,21)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1861" width="0.0444%" height="15" fill="rgb(205,209,3)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1845" width="0.0444%" height="15" fill="rgb(243,44,1)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1829" width="0.0444%" height="15" fill="rgb(206,159,16)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1813" width="0.0444%" height="15" fill="rgb(244,77,30)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1797" width="0.0444%" height="15" fill="rgb(218,69,12)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1781" width="0.0444%" height="15" fill="rgb(212,87,7)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1765" width="0.0444%" height="15" fill="rgb(245,114,25)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1749" width="0.0444%" height="15" fill="rgb(210,61,42)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1733" width="0.0444%" height="15" fill="rgb(211,52,33)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1717" width="0.0444%" height="15" fill="rgb(234,58,33)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1701" width="0.0444%" height="15" fill="rgb(220,115,36)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1685" width="0.0444%" height="15" fill="rgb(243,153,54)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1669" width="0.0444%" height="15" fill="rgb(251,47,18)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1653" width="0.0444%" height="15" fill="rgb(242,102,42)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1637" width="0.0444%" height="15" fill="rgb(234,31,38)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1621" width="0.0444%" height="15" fill="rgb(221,117,51)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1605" width="0.0444%" height="15" fill="rgb(212,20,18)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1589" width="0.0444%" height="15" fill="rgb(245,133,36)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1573" width="0.0444%" height="15" fill="rgb(212,6,19)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1557" width="0.0444%" height="15" fill="rgb(218,1,36)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1541" width="0.0444%" height="15" fill="rgb(246,84,54)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1525" width="0.0444%" height="15" fill="rgb(242,110,6)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1509" width="0.0444%" height="15" fill="rgb(214,47,5)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1493" width="0.0444%" height="15" fill="rgb(218,159,25)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1477" width="0.0444%" height="15" fill="rgb(215,211,28)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1461" width="0.0444%" height="15" fill="rgb(238,59,32)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1445" width="0.0444%" height="15" fill="rgb(226,82,3)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1429" width="0.0444%" height="15" fill="rgb(240,164,32)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1413" width="0.0444%" height="15" fill="rgb(232,46,7)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1397" width="0.0444%" height="15" fill="rgb(229,129,53)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1381" width="0.0444%" height="15" fill="rgb(234,188,29)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1365" width="0.0444%" height="15" fill="rgb(246,141,4)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1349" width="0.0444%" height="15" fill="rgb(229,23,39)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1333" width="0.0444%" height="15" fill="rgb(206,12,3)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1317" width="0.0444%" height="15" fill="rgb(252,226,20)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1301" width="0.0444%" height="15" fill="rgb(216,123,35)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1285" width="0.0444%" height="15" fill="rgb(212,68,40)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1269" width="0.0444%" height="15" fill="rgb(254,125,32)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1253" width="0.0444%" height="15" fill="rgb(253,97,22)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1237" width="0.0444%" height="15" fill="rgb(241,101,14)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1221" width="0.0444%" height="15" fill="rgb(238,103,29)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1205" width="0.0444%" height="15" fill="rgb(233,195,47)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1189" width="0.0444%" height="15" fill="rgb(246,218,30)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1173" width="0.0444%" height="15" fill="rgb(219,145,47)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1157" width="0.0444%" height="15" fill="rgb(243,12,26)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1141" width="0.0444%" height="15" fill="rgb(214,87,16)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1125" width="0.0444%" height="15" fill="rgb(208,99,42)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1109" width="0.0444%" height="15" fill="rgb(253,99,2)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1093" width="0.0444%" height="15" fill="rgb(220,168,23)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1077" width="0.0444%" height="15" fill="rgb(242,38,24)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="1061" width="0.0444%" height="15" fill="rgb(225,182,9)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1045" width="0.0444%" height="15" fill="rgb(243,178,37)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1029" width="0.0444%" height="15" fill="rgb(232,139,19)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="1013" width="0.0444%" height="15" fill="rgb(225,201,24)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="997" width="0.0444%" height="15" fill="rgb(221,47,46)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="981" width="0.0444%" height="15" fill="rgb(249,23,13)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="965" width="0.0444%" height="15" fill="rgb(219,9,5)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="949" width="0.0444%" height="15" fill="rgb(254,171,16)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="933" width="0.0444%" height="15" fill="rgb(230,171,20)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="917" width="0.0444%" height="15" fill="rgb(210,71,41)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="901" width="0.0444%" height="15" fill="rgb(206,173,20)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="885" width="0.0444%" height="15" fill="rgb(233,88,34)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="869" width="0.0444%" height="15" fill="rgb(223,209,46)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="853" width="0.0444%" height="15" fill="rgb(250,43,18)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="837" width="0.0444%" height="15" fill="rgb(208,13,10)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="821" width="0.0444%" height="15" fill="rgb(212,200,36)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="805" width="0.0444%" height="15" fill="rgb(225,90,30)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="789" width="0.0444%" height="15" fill="rgb(236,182,39)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="773" width="0.0444%" height="15" fill="rgb(212,144,35)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="757" width="0.0444%" height="15" fill="rgb(228,63,44)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="741" width="0.0444%" height="15" fill="rgb(228,109,6)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="725" width="0.0444%" height="15" fill="rgb(238,117,24)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="709" width="0.0444%" height="15" fill="rgb(242,26,26)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="693" width="0.0444%" height="15" fill="rgb(221,92,48)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="677" width="0.0444%" height="15" fill="rgb(209,209,32)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="661" width="0.0444%" height="15" fill="rgb(221,70,22)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="645" width="0.0444%" height="15" fill="rgb(248,145,5)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="629" width="0.0444%" height="15" fill="rgb(226,116,26)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="613" width="0.0444%" height="15" fill="rgb(244,5,17)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="597" width="0.0444%" height="15" fill="rgb(252,159,33)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="581" width="0.0444%" height="15" fill="rgb(206,71,0)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="565" width="0.0444%" height="15" fill="rgb(233,118,54)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="549" width="0.0444%" height="15" fill="rgb(234,83,48)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="533" width="0.0444%" height="15" fill="rgb(228,3,54)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="517" width="0.0444%" height="15" fill="rgb(226,155,13)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="501" width="0.0444%" height="15" fill="rgb(241,28,37)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="485" width="0.0444%" height="15" fill="rgb(233,93,10)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="469" width="0.0444%" height="15" fill="rgb(225,113,19)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="453" width="0.0444%" height="15" fill="rgb(241,2,18)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="437" width="0.0444%" height="15" fill="rgb(228,207,21)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="421" width="0.0444%" height="15" fill="rgb(213,211,35)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="405" width="0.0444%" height="15" fill="rgb(209,83,10)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="389" width="0.0444%" height="15" fill="rgb(209,164,1)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="373" width="0.0444%" height="15" fill="rgb(213,184,43)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="357" width="0.0444%" height="15" fill="rgb(231,61,34)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="341" width="0.0444%" height="15" fill="rgb(235,75,3)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="325" width="0.0444%" height="15" fill="rgb(220,106,47)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="309" width="0.0444%" height="15" fill="rgb(210,196,33)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="293" width="0.0444%" height="15" fill="rgb(229,154,42)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="277" width="0.0444%" height="15" fill="rgb(228,114,26)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="261" width="0.0444%" height="15" fill="rgb(208,144,1)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="245" width="0.0444%" height="15" fill="rgb(239,112,37)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="229" width="0.0444%" height="15" fill="rgb(210,96,50)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="213" width="0.0444%" height="15" fill="rgb(222,178,2)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="197" width="0.0444%" height="15" fill="rgb(226,74,18)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="181" width="0.0444%" height="15" fill="rgb(225,67,54)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42 samples, 0.04%)</title><rect x="22.4872%" y="165" width="0.0444%" height="15" fill="rgb(251,92,32)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42 samples, 0.04%)</title><rect x="22.4872%" y="149" width="0.0444%" height="15" fill="rgb(228,149,22)" fg:x="21267" fg:w="42"/><text x="22.7372%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (94 samples, 0.10%)</title><rect x="22.4565%" y="2053" width="0.0994%" height="15" fill="rgb(243,54,13)" fg:x="21238" fg:w="94"/><text x="22.7065%" y="2063.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (23 samples, 0.02%)</title><rect x="22.5316%" y="2037" width="0.0243%" height="15" fill="rgb(243,180,28)" fg:x="21309" fg:w="23"/><text x="22.7816%" y="2047.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="2021" width="0.0233%" height="15" fill="rgb(208,167,24)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="2031.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="2005" width="0.0233%" height="15" fill="rgb(245,73,45)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1989" width="0.0233%" height="15" fill="rgb(237,203,48)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1973" width="0.0233%" height="15" fill="rgb(211,197,16)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1957" width="0.0233%" height="15" fill="rgb(243,99,51)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1941" width="0.0233%" height="15" fill="rgb(215,123,29)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1925" width="0.0233%" height="15" fill="rgb(239,186,37)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1909" width="0.0233%" height="15" fill="rgb(252,136,39)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1893" width="0.0233%" height="15" fill="rgb(223,213,32)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1877" width="0.0233%" height="15" fill="rgb(233,115,5)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1861" width="0.0233%" height="15" fill="rgb(207,226,44)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1845" width="0.0233%" height="15" fill="rgb(208,126,0)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1829" width="0.0233%" height="15" fill="rgb(244,66,21)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1813" width="0.0233%" height="15" fill="rgb(222,97,12)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1797" width="0.0233%" height="15" fill="rgb(219,213,19)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1781" width="0.0233%" height="15" fill="rgb(252,169,30)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1765" width="0.0233%" height="15" fill="rgb(206,32,51)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1749" width="0.0233%" height="15" fill="rgb(250,172,42)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1733" width="0.0233%" height="15" fill="rgb(209,34,43)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1717" width="0.0233%" height="15" fill="rgb(223,11,35)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1701" width="0.0233%" height="15" fill="rgb(251,219,26)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1685" width="0.0233%" height="15" fill="rgb(231,119,3)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1669" width="0.0233%" height="15" fill="rgb(216,97,11)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1653" width="0.0233%" height="15" fill="rgb(223,59,9)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1637" width="0.0233%" height="15" fill="rgb(233,93,31)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1621" width="0.0233%" height="15" fill="rgb(239,81,33)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1605" width="0.0233%" height="15" fill="rgb(213,120,34)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1589" width="0.0233%" height="15" fill="rgb(243,49,53)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1573" width="0.0233%" height="15" fill="rgb(247,216,33)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1557" width="0.0233%" height="15" fill="rgb(226,26,14)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1541" width="0.0233%" height="15" fill="rgb(215,49,53)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1525" width="0.0233%" height="15" fill="rgb(245,162,40)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1509" width="0.0233%" height="15" fill="rgb(229,68,17)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1493" width="0.0233%" height="15" fill="rgb(213,182,10)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1477" width="0.0233%" height="15" fill="rgb(245,125,30)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1461" width="0.0233%" height="15" fill="rgb(232,202,2)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1445" width="0.0233%" height="15" fill="rgb(237,140,51)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1429" width="0.0233%" height="15" fill="rgb(236,157,25)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1413" width="0.0233%" height="15" fill="rgb(219,209,0)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1397" width="0.0233%" height="15" fill="rgb(240,116,54)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1381" width="0.0233%" height="15" fill="rgb(216,10,36)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1365" width="0.0233%" height="15" fill="rgb(222,72,44)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1349" width="0.0233%" height="15" fill="rgb(232,159,9)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1333" width="0.0233%" height="15" fill="rgb(210,39,32)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1317" width="0.0233%" height="15" fill="rgb(216,194,45)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1301" width="0.0233%" height="15" fill="rgb(218,18,35)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1285" width="0.0233%" height="15" fill="rgb(207,83,51)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1269" width="0.0233%" height="15" fill="rgb(225,63,43)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1253" width="0.0233%" height="15" fill="rgb(207,57,36)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1237" width="0.0233%" height="15" fill="rgb(216,99,33)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1221" width="0.0233%" height="15" fill="rgb(225,42,16)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1205" width="0.0233%" height="15" fill="rgb(220,201,45)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1189" width="0.0233%" height="15" fill="rgb(225,33,4)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1173" width="0.0233%" height="15" fill="rgb(224,33,50)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1157" width="0.0233%" height="15" fill="rgb(246,198,51)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1141" width="0.0233%" height="15" fill="rgb(205,22,4)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1125" width="0.0233%" height="15" fill="rgb(206,3,8)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1109" width="0.0233%" height="15" fill="rgb(251,23,15)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1093" width="0.0233%" height="15" fill="rgb(252,88,28)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1077" width="0.0233%" height="15" fill="rgb(212,127,14)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1061" width="0.0233%" height="15" fill="rgb(247,145,37)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1045" width="0.0233%" height="15" fill="rgb(209,117,53)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="1029" width="0.0233%" height="15" fill="rgb(212,90,42)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="1013" width="0.0233%" height="15" fill="rgb(218,164,37)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="997" width="0.0233%" height="15" fill="rgb(246,65,34)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="981" width="0.0233%" height="15" fill="rgb(231,100,33)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="965" width="0.0233%" height="15" fill="rgb(228,126,14)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="949" width="0.0233%" height="15" fill="rgb(215,173,21)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="933" width="0.0233%" height="15" fill="rgb(210,6,40)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="917" width="0.0233%" height="15" fill="rgb(212,48,18)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="901" width="0.0233%" height="15" fill="rgb(230,214,11)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="885" width="0.0233%" height="15" fill="rgb(254,105,39)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="869" width="0.0233%" height="15" fill="rgb(245,158,5)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="853" width="0.0233%" height="15" fill="rgb(249,208,11)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="837" width="0.0233%" height="15" fill="rgb(210,39,28)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="821" width="0.0233%" height="15" fill="rgb(211,56,53)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="805" width="0.0233%" height="15" fill="rgb(226,201,30)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="789" width="0.0233%" height="15" fill="rgb(239,101,34)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="773" width="0.0233%" height="15" fill="rgb(226,209,5)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="757" width="0.0233%" height="15" fill="rgb(250,105,47)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="741" width="0.0233%" height="15" fill="rgb(230,72,3)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="725" width="0.0233%" height="15" fill="rgb(232,218,39)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="709" width="0.0233%" height="15" fill="rgb(248,166,6)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="693" width="0.0233%" height="15" fill="rgb(247,89,20)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="677" width="0.0233%" height="15" fill="rgb(248,130,54)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="661" width="0.0233%" height="15" fill="rgb(234,196,4)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="645" width="0.0233%" height="15" fill="rgb(250,143,31)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="629" width="0.0233%" height="15" fill="rgb(211,110,34)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="613" width="0.0233%" height="15" fill="rgb(215,124,48)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="597" width="0.0233%" height="15" fill="rgb(216,46,13)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="581" width="0.0233%" height="15" fill="rgb(205,184,25)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="565" width="0.0233%" height="15" fill="rgb(228,1,10)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="549" width="0.0233%" height="15" fill="rgb(213,116,27)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="533" width="0.0233%" height="15" fill="rgb(241,95,50)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="517" width="0.0233%" height="15" fill="rgb(238,48,32)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="501" width="0.0233%" height="15" fill="rgb(235,113,49)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="485" width="0.0233%" height="15" fill="rgb(205,127,43)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="469" width="0.0233%" height="15" fill="rgb(250,162,2)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="453" width="0.0233%" height="15" fill="rgb(220,13,41)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="437" width="0.0233%" height="15" fill="rgb(249,221,25)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="421" width="0.0233%" height="15" fill="rgb(215,208,19)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="405" width="0.0233%" height="15" fill="rgb(236,175,2)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="389" width="0.0233%" height="15" fill="rgb(241,52,2)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="373" width="0.0233%" height="15" fill="rgb(248,140,14)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="357" width="0.0233%" height="15" fill="rgb(253,22,42)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="341" width="0.0233%" height="15" fill="rgb(234,61,47)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="325" width="0.0233%" height="15" fill="rgb(208,226,15)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="309" width="0.0233%" height="15" fill="rgb(217,221,4)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="293" width="0.0233%" height="15" fill="rgb(212,174,34)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="277" width="0.0233%" height="15" fill="rgb(253,83,4)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="261" width="0.0233%" height="15" fill="rgb(250,195,49)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="245" width="0.0233%" height="15" fill="rgb(241,192,25)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="229" width="0.0233%" height="15" fill="rgb(208,124,10)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="213" width="0.0233%" height="15" fill="rgb(222,33,0)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="197" width="0.0233%" height="15" fill="rgb(234,209,28)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="181" width="0.0233%" height="15" fill="rgb(224,11,23)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="165" width="0.0233%" height="15" fill="rgb(232,99,1)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="149" width="0.0233%" height="15" fill="rgb(237,95,45)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="133" width="0.0233%" height="15" fill="rgb(208,109,11)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22 samples, 0.02%)</title><rect x="22.5326%" y="117" width="0.0233%" height="15" fill="rgb(216,190,48)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.02%)</title><rect x="22.5326%" y="101" width="0.0233%" height="15" fill="rgb(251,171,36)" fg:x="21310" fg:w="22"/><text x="22.7826%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (20 samples, 0.02%)</title><rect x="22.5347%" y="85" width="0.0211%" height="15" fill="rgb(230,62,22)" fg:x="21312" fg:w="20"/><text x="22.7847%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.5569%" y="101" width="0.0254%" height="15" fill="rgb(225,114,35)" fg:x="21333" fg:w="24"/><text x="22.8069%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.5569%" y="85" width="0.0254%" height="15" fill="rgb(215,118,42)" fg:x="21333" fg:w="24"/><text x="22.8069%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24 samples, 0.03%)</title><rect x="22.5569%" y="69" width="0.0254%" height="15" fill="rgb(243,119,21)" fg:x="21333" fg:w="24"/><text x="22.8069%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.03%)</title><rect x="22.5569%" y="53" width="0.0254%" height="15" fill="rgb(252,177,53)" fg:x="21333" fg:w="24"/><text x="22.8069%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (23 samples, 0.02%)</title><rect x="22.5580%" y="37" width="0.0243%" height="15" fill="rgb(237,209,29)" fg:x="21334" fg:w="23"/><text x="22.8080%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="2053" width="0.0285%" height="15" fill="rgb(212,65,23)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="2063.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="2037" width="0.0285%" height="15" fill="rgb(230,222,46)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="2047.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="2021" width="0.0285%" height="15" fill="rgb(215,135,32)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="2031.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="2005" width="0.0285%" height="15" fill="rgb(246,101,22)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1989" width="0.0285%" height="15" fill="rgb(206,107,13)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1973" width="0.0285%" height="15" fill="rgb(250,100,44)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1957" width="0.0285%" height="15" fill="rgb(231,147,38)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1941" width="0.0285%" height="15" fill="rgb(229,8,40)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1925" width="0.0285%" height="15" fill="rgb(221,135,30)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1909" width="0.0285%" height="15" fill="rgb(249,193,18)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1893" width="0.0285%" height="15" fill="rgb(209,133,39)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1877" width="0.0285%" height="15" fill="rgb(232,100,14)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1861" width="0.0285%" height="15" fill="rgb(224,185,1)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1845" width="0.0285%" height="15" fill="rgb(223,139,8)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1829" width="0.0285%" height="15" fill="rgb(232,213,38)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1813" width="0.0285%" height="15" fill="rgb(207,94,22)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1797" width="0.0285%" height="15" fill="rgb(219,183,54)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1781" width="0.0285%" height="15" fill="rgb(216,185,54)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1765" width="0.0285%" height="15" fill="rgb(254,217,39)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1749" width="0.0285%" height="15" fill="rgb(240,178,23)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1733" width="0.0285%" height="15" fill="rgb(218,11,47)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1717" width="0.0285%" height="15" fill="rgb(218,51,51)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1701" width="0.0285%" height="15" fill="rgb(238,126,27)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1685" width="0.0285%" height="15" fill="rgb(249,202,22)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1669" width="0.0285%" height="15" fill="rgb(254,195,49)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1653" width="0.0285%" height="15" fill="rgb(208,123,14)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1637" width="0.0285%" height="15" fill="rgb(224,200,8)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1621" width="0.0285%" height="15" fill="rgb(217,61,36)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1605" width="0.0285%" height="15" fill="rgb(206,35,45)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1589" width="0.0285%" height="15" fill="rgb(217,65,33)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1573" width="0.0285%" height="15" fill="rgb(222,158,48)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1557" width="0.0285%" height="15" fill="rgb(254,2,54)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1541" width="0.0285%" height="15" fill="rgb(250,143,38)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1525" width="0.0285%" height="15" fill="rgb(248,25,0)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1509" width="0.0285%" height="15" fill="rgb(206,152,27)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1493" width="0.0285%" height="15" fill="rgb(240,77,30)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1477" width="0.0285%" height="15" fill="rgb(231,5,3)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1461" width="0.0285%" height="15" fill="rgb(207,226,32)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1445" width="0.0285%" height="15" fill="rgb(222,207,47)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1429" width="0.0285%" height="15" fill="rgb(229,115,45)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1413" width="0.0285%" height="15" fill="rgb(224,191,6)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1397" width="0.0285%" height="15" fill="rgb(230,227,24)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1381" width="0.0285%" height="15" fill="rgb(228,80,19)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1365" width="0.0285%" height="15" fill="rgb(247,229,0)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1349" width="0.0285%" height="15" fill="rgb(237,194,15)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1333" width="0.0285%" height="15" fill="rgb(219,203,20)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1317" width="0.0285%" height="15" fill="rgb(234,128,8)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1301" width="0.0285%" height="15" fill="rgb(248,202,8)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1285" width="0.0285%" height="15" fill="rgb(206,104,37)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1269" width="0.0285%" height="15" fill="rgb(223,8,27)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1253" width="0.0285%" height="15" fill="rgb(216,217,28)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1237" width="0.0285%" height="15" fill="rgb(249,199,1)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1221" width="0.0285%" height="15" fill="rgb(240,85,17)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1205" width="0.0285%" height="15" fill="rgb(206,108,45)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1189" width="0.0285%" height="15" fill="rgb(245,210,41)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1173" width="0.0285%" height="15" fill="rgb(206,13,37)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1157" width="0.0285%" height="15" fill="rgb(250,61,18)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1141" width="0.0285%" height="15" fill="rgb(235,172,48)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1125" width="0.0285%" height="15" fill="rgb(249,201,17)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1109" width="0.0285%" height="15" fill="rgb(219,208,6)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1093" width="0.0285%" height="15" fill="rgb(248,31,23)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1077" width="0.0285%" height="15" fill="rgb(245,15,42)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1061" width="0.0285%" height="15" fill="rgb(222,217,39)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1045" width="0.0285%" height="15" fill="rgb(210,219,27)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="1029" width="0.0285%" height="15" fill="rgb(252,166,36)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="1013" width="0.0285%" height="15" fill="rgb(245,132,34)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="997" width="0.0285%" height="15" fill="rgb(236,54,3)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="981" width="0.0285%" height="15" fill="rgb(241,173,43)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="965" width="0.0285%" height="15" fill="rgb(215,190,9)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="949" width="0.0285%" height="15" fill="rgb(242,101,16)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="933" width="0.0285%" height="15" fill="rgb(223,190,21)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="917" width="0.0285%" height="15" fill="rgb(215,228,25)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="901" width="0.0285%" height="15" fill="rgb(225,36,22)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="885" width="0.0285%" height="15" fill="rgb(251,106,46)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="869" width="0.0285%" height="15" fill="rgb(208,90,1)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="853" width="0.0285%" height="15" fill="rgb(243,10,4)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="837" width="0.0285%" height="15" fill="rgb(212,137,27)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="821" width="0.0285%" height="15" fill="rgb(231,220,49)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="805" width="0.0285%" height="15" fill="rgb(237,96,20)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="789" width="0.0285%" height="15" fill="rgb(239,229,30)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="773" width="0.0285%" height="15" fill="rgb(219,65,33)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="757" width="0.0285%" height="15" fill="rgb(243,134,7)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="741" width="0.0285%" height="15" fill="rgb(216,177,54)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="725" width="0.0285%" height="15" fill="rgb(211,160,20)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="709" width="0.0285%" height="15" fill="rgb(239,85,39)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="693" width="0.0285%" height="15" fill="rgb(232,125,22)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="677" width="0.0285%" height="15" fill="rgb(244,57,34)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="661" width="0.0285%" height="15" fill="rgb(214,203,32)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="645" width="0.0285%" height="15" fill="rgb(207,58,43)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="629" width="0.0285%" height="15" fill="rgb(215,193,15)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="613" width="0.0285%" height="15" fill="rgb(232,15,44)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="597" width="0.0285%" height="15" fill="rgb(212,3,48)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="581" width="0.0285%" height="15" fill="rgb(218,128,7)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="565" width="0.0285%" height="15" fill="rgb(226,216,39)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="549" width="0.0285%" height="15" fill="rgb(243,47,51)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="533" width="0.0285%" height="15" fill="rgb(241,183,40)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="517" width="0.0285%" height="15" fill="rgb(231,217,32)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="501" width="0.0285%" height="15" fill="rgb(229,61,38)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="485" width="0.0285%" height="15" fill="rgb(225,210,5)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="469" width="0.0285%" height="15" fill="rgb(231,79,45)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="453" width="0.0285%" height="15" fill="rgb(224,100,7)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="437" width="0.0285%" height="15" fill="rgb(241,198,18)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="421" width="0.0285%" height="15" fill="rgb(252,97,53)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="405" width="0.0285%" height="15" fill="rgb(220,88,7)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="389" width="0.0285%" height="15" fill="rgb(213,176,14)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="373" width="0.0285%" height="15" fill="rgb(246,73,7)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="357" width="0.0285%" height="15" fill="rgb(245,64,36)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="341" width="0.0285%" height="15" fill="rgb(245,80,10)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="325" width="0.0285%" height="15" fill="rgb(232,107,50)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="309" width="0.0285%" height="15" fill="rgb(253,3,0)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="293" width="0.0285%" height="15" fill="rgb(212,99,53)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="277" width="0.0285%" height="15" fill="rgb(249,111,54)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="261" width="0.0285%" height="15" fill="rgb(249,55,30)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="245" width="0.0285%" height="15" fill="rgb(237,47,42)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="229" width="0.0285%" height="15" fill="rgb(211,20,18)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="213" width="0.0285%" height="15" fill="rgb(231,203,46)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="197" width="0.0285%" height="15" fill="rgb(237,142,3)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="181" width="0.0285%" height="15" fill="rgb(241,107,1)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="165" width="0.0285%" height="15" fill="rgb(229,83,13)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="149" width="0.0285%" height="15" fill="rgb(241,91,40)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27 samples, 0.03%)</title><rect x="22.5569%" y="133" width="0.0285%" height="15" fill="rgb(225,3,45)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27 samples, 0.03%)</title><rect x="22.5569%" y="117" width="0.0285%" height="15" fill="rgb(244,223,14)" fg:x="21333" fg:w="27"/><text x="22.8069%" y="127.50"></text></g><g><title>node (1,112 samples, 1.18%)</title><rect x="21.4129%" y="2069" width="1.1758%" height="15" fill="rgb(224,124,37)" fg:x="20251" fg:w="1112"/><text x="21.6629%" y="2079.50"></text></g><g><title>__wake_up_common_lock (42 samples, 0.04%)</title><rect x="22.6130%" y="1781" width="0.0444%" height="15" fill="rgb(251,171,30)" fg:x="21386" fg:w="42"/><text x="22.8630%" y="1791.50"></text></g><g><title>__lock_text_start (42 samples, 0.04%)</title><rect x="22.6130%" y="1765" width="0.0444%" height="15" fill="rgb(236,46,54)" fg:x="21386" fg:w="42"/><text x="22.8630%" y="1775.50"></text></g><g><title>fsnotify_add_event (43 samples, 0.05%)</title><rect x="22.6130%" y="1797" width="0.0455%" height="15" fill="rgb(245,213,5)" fg:x="21386" fg:w="43"/><text x="22.8630%" y="1807.50"></text></g><g><title>__fsnotify_parent (50 samples, 0.05%)</title><rect x="22.6077%" y="1845" width="0.0529%" height="15" fill="rgb(230,144,27)" fg:x="21381" fg:w="50"/><text x="22.8577%" y="1855.50"></text></g><g><title>fsnotify (48 samples, 0.05%)</title><rect x="22.6098%" y="1829" width="0.0508%" height="15" fill="rgb(220,86,6)" fg:x="21383" fg:w="48"/><text x="22.8598%" y="1839.50"></text></g><g><title>inotify_handle_inode_event (46 samples, 0.05%)</title><rect x="22.6119%" y="1813" width="0.0486%" height="15" fill="rgb(240,20,13)" fg:x="21385" fg:w="46"/><text x="22.8619%" y="1823.50"></text></g><g><title>__slab_alloc.isra.0.constprop.0 (10 samples, 0.01%)</title><rect x="22.6986%" y="1669" width="0.0106%" height="15" fill="rgb(217,89,34)" fg:x="21467" fg:w="10"/><text x="22.9486%" y="1679.50"></text></g><g><title>___slab_alloc.isra.0.constprop.0 (10 samples, 0.01%)</title><rect x="22.6986%" y="1653" width="0.0106%" height="15" fill="rgb(229,13,5)" fg:x="21467" fg:w="10"/><text x="22.9486%" y="1663.50"></text></g><g><title>allocate_slab (10 samples, 0.01%)</title><rect x="22.6986%" y="1637" width="0.0106%" height="15" fill="rgb(244,67,35)" fg:x="21467" fg:w="10"/><text x="22.9486%" y="1647.50"></text></g><g><title>alloc_buffer_head (14 samples, 0.01%)</title><rect x="22.6965%" y="1701" width="0.0148%" height="15" fill="rgb(221,40,2)" fg:x="21465" fg:w="14"/><text x="22.9465%" y="1711.50"></text></g><g><title>kmem_cache_alloc (13 samples, 0.01%)</title><rect x="22.6976%" y="1685" width="0.0137%" height="15" fill="rgb(237,157,21)" fg:x="21466" fg:w="13"/><text x="22.9476%" y="1695.50"></text></g><g><title>create_page_buffers (24 samples, 0.03%)</title><rect x="22.6881%" y="1749" width="0.0254%" height="15" fill="rgb(222,94,11)" fg:x="21457" fg:w="24"/><text x="22.9381%" y="1759.50"></text></g><g><title>create_empty_buffers (24 samples, 0.03%)</title><rect x="22.6881%" y="1733" width="0.0254%" height="15" fill="rgb(249,113,6)" fg:x="21457" fg:w="24"/><text x="22.9381%" y="1743.50"></text></g><g><title>alloc_page_buffers (18 samples, 0.02%)</title><rect x="22.6944%" y="1717" width="0.0190%" height="15" fill="rgb(238,137,36)" fg:x="21463" fg:w="18"/><text x="22.9444%" y="1727.50"></text></g><g><title>ext4_da_get_block_prep (16 samples, 0.02%)</title><rect x="22.7134%" y="1749" width="0.0169%" height="15" fill="rgb(210,102,26)" fg:x="21481" fg:w="16"/><text x="22.9634%" y="1759.50"></text></g><g><title>__block_write_begin_int (56 samples, 0.06%)</title><rect x="22.6828%" y="1765" width="0.0592%" height="15" fill="rgb(218,30,30)" fg:x="21452" fg:w="56"/><text x="22.9328%" y="1775.50"></text></g><g><title>memset_erms (11 samples, 0.01%)</title><rect x="22.7303%" y="1749" width="0.0116%" height="15" fill="rgb(214,67,26)" fg:x="21497" fg:w="11"/><text x="22.9803%" y="1759.50"></text></g><g><title>__ext4_journal_start_sb (12 samples, 0.01%)</title><rect x="22.7420%" y="1765" width="0.0127%" height="15" fill="rgb(251,9,53)" fg:x="21508" fg:w="12"/><text x="22.9920%" y="1775.50"></text></g><g><title>jbd2__journal_start (11 samples, 0.01%)</title><rect x="22.7430%" y="1749" width="0.0116%" height="15" fill="rgb(228,204,25)" fg:x="21509" fg:w="11"/><text x="22.9930%" y="1759.50"></text></g><g><title>__alloc_pages_nodemask (17 samples, 0.02%)</title><rect x="22.7578%" y="1733" width="0.0180%" height="15" fill="rgb(207,153,8)" fg:x="21523" fg:w="17"/><text x="23.0078%" y="1743.50"></text></g><g><title>get_page_from_freelist (14 samples, 0.01%)</title><rect x="22.7610%" y="1717" width="0.0148%" height="15" fill="rgb(242,9,16)" fg:x="21526" fg:w="14"/><text x="23.0110%" y="1727.50"></text></g><g><title>__add_to_page_cache_locked (26 samples, 0.03%)</title><rect x="22.7758%" y="1717" width="0.0275%" height="15" fill="rgb(217,211,10)" fg:x="21540" fg:w="26"/><text x="23.0258%" y="1727.50"></text></g><g><title>add_to_page_cache_lru (35 samples, 0.04%)</title><rect x="22.7758%" y="1733" width="0.0370%" height="15" fill="rgb(219,228,52)" fg:x="21540" fg:w="35"/><text x="23.0258%" y="1743.50"></text></g><g><title>ext4_da_write_begin (128 samples, 0.14%)</title><rect x="22.6785%" y="1781" width="0.1353%" height="15" fill="rgb(231,92,29)" fg:x="21448" fg:w="128"/><text x="22.9285%" y="1791.50"></text></g><g><title>grab_cache_page_write_begin (56 samples, 0.06%)</title><rect x="22.7547%" y="1765" width="0.0592%" height="15" fill="rgb(232,8,23)" fg:x="21520" fg:w="56"/><text x="23.0047%" y="1775.50"></text></g><g><title>pagecache_get_page (56 samples, 0.06%)</title><rect x="22.7547%" y="1749" width="0.0592%" height="15" fill="rgb(216,211,34)" fg:x="21520" fg:w="56"/><text x="23.0047%" y="1759.50"></text></g><g><title>__ext4_journal_stop (10 samples, 0.01%)</title><rect x="22.8171%" y="1765" width="0.0106%" height="15" fill="rgb(236,151,0)" fg:x="21579" fg:w="10"/><text x="23.0671%" y="1775.50"></text></g><g><title>chksum_update (26 samples, 0.03%)</title><rect x="22.8583%" y="1653" width="0.0275%" height="15" fill="rgb(209,168,3)" fg:x="21618" fg:w="26"/><text x="23.1083%" y="1663.50"></text></g><g><title>__crc32c_le (22 samples, 0.02%)</title><rect x="22.8625%" y="1637" width="0.0233%" height="15" fill="rgb(208,129,28)" fg:x="21622" fg:w="22"/><text x="23.1125%" y="1647.50"></text></g><g><title>ext4_inode_csum_set (34 samples, 0.04%)</title><rect x="22.8509%" y="1685" width="0.0360%" height="15" fill="rgb(229,78,22)" fg:x="21611" fg:w="34"/><text x="23.1009%" y="1695.50"></text></g><g><title>ext4_inode_csum.isra.0 (34 samples, 0.04%)</title><rect x="22.8509%" y="1669" width="0.0360%" height="15" fill="rgb(228,187,13)" fg:x="21611" fg:w="34"/><text x="23.1009%" y="1679.50"></text></g><g><title>ext4_mark_iloc_dirty (49 samples, 0.05%)</title><rect x="22.8361%" y="1701" width="0.0518%" height="15" fill="rgb(240,119,24)" fg:x="21597" fg:w="49"/><text x="23.0861%" y="1711.50"></text></g><g><title>__mark_inode_dirty (62 samples, 0.07%)</title><rect x="22.8308%" y="1749" width="0.0656%" height="15" fill="rgb(209,194,42)" fg:x="21592" fg:w="62"/><text x="23.0808%" y="1759.50"></text></g><g><title>ext4_dirty_inode (61 samples, 0.06%)</title><rect x="22.8319%" y="1733" width="0.0645%" height="15" fill="rgb(247,200,46)" fg:x="21593" fg:w="61"/><text x="23.0819%" y="1743.50"></text></g><g><title>__ext4_mark_inode_dirty (59 samples, 0.06%)</title><rect x="22.8340%" y="1717" width="0.0624%" height="15" fill="rgb(218,76,16)" fg:x="21595" fg:w="59"/><text x="23.0840%" y="1727.50"></text></g><g><title>block_write_end (20 samples, 0.02%)</title><rect x="22.8964%" y="1749" width="0.0211%" height="15" fill="rgb(225,21,48)" fg:x="21654" fg:w="20"/><text x="23.1464%" y="1759.50"></text></g><g><title>__block_commit_write.isra.0 (20 samples, 0.02%)</title><rect x="22.8964%" y="1733" width="0.0211%" height="15" fill="rgb(239,223,50)" fg:x="21654" fg:w="20"/><text x="23.1464%" y="1743.50"></text></g><g><title>ext4_da_write_end (99 samples, 0.10%)</title><rect x="22.8139%" y="1781" width="0.1047%" height="15" fill="rgb(244,45,21)" fg:x="21576" fg:w="99"/><text x="23.0639%" y="1791.50"></text></g><g><title>generic_write_end (86 samples, 0.09%)</title><rect x="22.8276%" y="1765" width="0.0909%" height="15" fill="rgb(232,33,43)" fg:x="21589" fg:w="86"/><text x="23.0776%" y="1775.50"></text></g><g><title>copy_user_enhanced_fast_string (150 samples, 0.16%)</title><rect x="22.9207%" y="1749" width="0.1586%" height="15" fill="rgb(209,8,3)" fg:x="21677" fg:w="150"/><text x="23.1707%" y="1759.50"></text></g><g><title>iov_iter_copy_from_user_atomic (152 samples, 0.16%)</title><rect x="22.9196%" y="1781" width="0.1607%" height="15" fill="rgb(214,25,53)" fg:x="21676" fg:w="152"/><text x="23.1696%" y="1791.50"></text></g><g><title>copyin (151 samples, 0.16%)</title><rect x="22.9207%" y="1765" width="0.1597%" height="15" fill="rgb(254,186,54)" fg:x="21677" fg:w="151"/><text x="23.1707%" y="1775.50"></text></g><g><title>generic_perform_write (407 samples, 0.43%)</title><rect x="22.6701%" y="1797" width="0.4304%" height="15" fill="rgb(208,174,49)" fg:x="21440" fg:w="407"/><text x="22.9201%" y="1807.50"></text></g><g><title>iov_iter_fault_in_readable (19 samples, 0.02%)</title><rect x="23.0803%" y="1781" width="0.0201%" height="15" fill="rgb(233,191,51)" fg:x="21828" fg:w="19"/><text x="23.3303%" y="1791.50"></text></g><g><title>__get_user_nocheck_1 (19 samples, 0.02%)</title><rect x="23.0803%" y="1765" width="0.0201%" height="15" fill="rgb(222,134,10)" fg:x="21828" fg:w="19"/><text x="23.3303%" y="1775.50"></text></g><g><title>[perf] (474 samples, 0.50%)</title><rect x="22.6003%" y="1957" width="0.5012%" height="15" fill="rgb(230,226,20)" fg:x="21374" fg:w="474"/><text x="22.8503%" y="1967.50"></text></g><g><title>__GI___libc_write (474 samples, 0.50%)</title><rect x="22.6003%" y="1941" width="0.5012%" height="15" fill="rgb(251,111,25)" fg:x="21374" fg:w="474"/><text x="22.8503%" y="1951.50"></text></g><g><title>__GI___libc_write (473 samples, 0.50%)</title><rect x="22.6013%" y="1925" width="0.5001%" height="15" fill="rgb(224,40,46)" fg:x="21375" fg:w="473"/><text x="22.8513%" y="1935.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (471 samples, 0.50%)</title><rect x="22.6035%" y="1909" width="0.4980%" height="15" fill="rgb(236,108,47)" fg:x="21377" fg:w="471"/><text x="22.8535%" y="1919.50"></text></g><g><title>do_syscall_64 (471 samples, 0.50%)</title><rect x="22.6035%" y="1893" width="0.4980%" height="15" fill="rgb(234,93,0)" fg:x="21377" fg:w="471"/><text x="22.8535%" y="1903.50"></text></g><g><title>ksys_write (471 samples, 0.50%)</title><rect x="22.6035%" y="1877" width="0.4980%" height="15" fill="rgb(224,213,32)" fg:x="21377" fg:w="471"/><text x="22.8535%" y="1887.50"></text></g><g><title>vfs_write (468 samples, 0.49%)</title><rect x="22.6066%" y="1861" width="0.4949%" height="15" fill="rgb(251,11,48)" fg:x="21380" fg:w="468"/><text x="22.8566%" y="1871.50"></text></g><g><title>new_sync_write (417 samples, 0.44%)</title><rect x="22.6606%" y="1845" width="0.4409%" height="15" fill="rgb(236,173,5)" fg:x="21431" fg:w="417"/><text x="22.9106%" y="1855.50"></text></g><g><title>ext4_file_write_iter (417 samples, 0.44%)</title><rect x="22.6606%" y="1829" width="0.4409%" height="15" fill="rgb(230,95,12)" fg:x="21431" fg:w="417"/><text x="22.9106%" y="1839.50"></text></g><g><title>ext4_buffered_write_iter (417 samples, 0.44%)</title><rect x="22.6606%" y="1813" width="0.4409%" height="15" fill="rgb(232,209,1)" fg:x="21431" fg:w="417"/><text x="22.9106%" y="1823.50"></text></g><g><title>[perf] (488 samples, 0.52%)</title><rect x="22.5929%" y="2005" width="0.5160%" height="15" fill="rgb(232,6,1)" fg:x="21367" fg:w="488"/><text x="22.8429%" y="2015.50"></text></g><g><title>[perf] (483 samples, 0.51%)</title><rect x="22.5982%" y="1989" width="0.5107%" height="15" fill="rgb(210,224,50)" fg:x="21372" fg:w="483"/><text x="22.8482%" y="1999.50"></text></g><g><title>[perf] (481 samples, 0.51%)</title><rect x="22.6003%" y="1973" width="0.5086%" height="15" fill="rgb(228,127,35)" fg:x="21374" fg:w="481"/><text x="22.8503%" y="1983.50"></text></g><g><title>perf_poll (14 samples, 0.01%)</title><rect x="23.1195%" y="1925" width="0.0148%" height="15" fill="rgb(245,102,45)" fg:x="21865" fg:w="14"/><text x="23.3695%" y="1935.50"></text></g><g><title>__x64_sys_poll (36 samples, 0.04%)</title><rect x="23.1089%" y="1957" width="0.0381%" height="15" fill="rgb(214,1,49)" fg:x="21855" fg:w="36"/><text x="23.3589%" y="1967.50"></text></g><g><title>do_sys_poll (36 samples, 0.04%)</title><rect x="23.1089%" y="1941" width="0.0381%" height="15" fill="rgb(226,163,40)" fg:x="21855" fg:w="36"/><text x="23.3589%" y="1951.50"></text></g><g><title>poll_schedule_timeout.constprop.0 (11 samples, 0.01%)</title><rect x="23.1353%" y="1925" width="0.0116%" height="15" fill="rgb(239,212,28)" fg:x="21880" fg:w="11"/><text x="23.3853%" y="1935.50"></text></g><g><title>schedule_hrtimeout_range_clock (11 samples, 0.01%)</title><rect x="23.1353%" y="1909" width="0.0116%" height="15" fill="rgb(220,20,13)" fg:x="21880" fg:w="11"/><text x="23.3853%" y="1919.50"></text></g><g><title>schedule (11 samples, 0.01%)</title><rect x="23.1353%" y="1893" width="0.0116%" height="15" fill="rgb(210,164,35)" fg:x="21880" fg:w="11"/><text x="23.3853%" y="1903.50"></text></g><g><title>__sched_text_start (11 samples, 0.01%)</title><rect x="23.1353%" y="1877" width="0.0116%" height="15" fill="rgb(248,109,41)" fg:x="21880" fg:w="11"/><text x="23.3853%" y="1887.50"></text></g><g><title>finish_task_switch (11 samples, 0.01%)</title><rect x="23.1353%" y="1861" width="0.0116%" height="15" fill="rgb(238,23,50)" fg:x="21880" fg:w="11"/><text x="23.3853%" y="1871.50"></text></g><g><title>do_syscall_64 (37 samples, 0.04%)</title><rect x="23.1089%" y="1973" width="0.0391%" height="15" fill="rgb(211,48,49)" fg:x="21855" fg:w="37"/><text x="23.3589%" y="1983.50"></text></g><g><title>perf (530 samples, 0.56%)</title><rect x="22.5897%" y="2069" width="0.5604%" height="15" fill="rgb(223,36,21)" fg:x="21364" fg:w="530"/><text x="22.8397%" y="2079.50"></text></g><g><title>[unknown] (530 samples, 0.56%)</title><rect x="22.5897%" y="2053" width="0.5604%" height="15" fill="rgb(207,123,46)" fg:x="21364" fg:w="530"/><text x="22.8397%" y="2063.50"></text></g><g><title>[perf] (530 samples, 0.56%)</title><rect x="22.5897%" y="2037" width="0.5604%" height="15" fill="rgb(240,218,32)" fg:x="21364" fg:w="530"/><text x="22.8397%" y="2047.50"></text></g><g><title>[perf] (530 samples, 0.56%)</title><rect x="22.5897%" y="2021" width="0.5604%" height="15" fill="rgb(252,5,43)" fg:x="21364" fg:w="530"/><text x="22.8397%" y="2031.50"></text></g><g><title>__GI___poll (39 samples, 0.04%)</title><rect x="23.1089%" y="2005" width="0.0412%" height="15" fill="rgb(252,84,19)" fg:x="21855" fg:w="39"/><text x="23.3589%" y="2015.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (39 samples, 0.04%)</title><rect x="23.1089%" y="1989" width="0.0412%" height="15" fill="rgb(243,152,39)" fg:x="21855" fg:w="39"/><text x="23.3589%" y="1999.50"></text></g><g><title>__lock_text_start (14 samples, 0.01%)</title><rect x="23.1945%" y="1909" width="0.0148%" height="15" fill="rgb(234,160,15)" fg:x="21936" fg:w="14"/><text x="23.4445%" y="1919.50"></text></g><g><title>__remove_mapping (17 samples, 0.02%)</title><rect x="23.1924%" y="1925" width="0.0180%" height="15" fill="rgb(237,34,20)" fg:x="21934" fg:w="17"/><text x="23.4424%" y="1935.50"></text></g><g><title>jbd2_journal_try_to_free_buffers (21 samples, 0.02%)</title><rect x="23.2199%" y="1925" width="0.0222%" height="15" fill="rgb(229,97,13)" fg:x="21960" fg:w="21"/><text x="23.4699%" y="1935.50"></text></g><g><title>try_to_free_buffers (11 samples, 0.01%)</title><rect x="23.2305%" y="1909" width="0.0116%" height="15" fill="rgb(234,71,50)" fg:x="21970" fg:w="11"/><text x="23.4805%" y="1919.50"></text></g><g><title>shrink_lruvec (78 samples, 0.08%)</title><rect x="23.1734%" y="1973" width="0.0825%" height="15" fill="rgb(253,155,4)" fg:x="21916" fg:w="78"/><text x="23.4234%" y="1983.50"></text></g><g><title>shrink_inactive_list (77 samples, 0.08%)</title><rect x="23.1744%" y="1957" width="0.0814%" height="15" fill="rgb(222,185,37)" fg:x="21917" fg:w="77"/><text x="23.4244%" y="1967.50"></text></g><g><title>shrink_page_list (67 samples, 0.07%)</title><rect x="23.1850%" y="1941" width="0.0708%" height="15" fill="rgb(251,177,13)" fg:x="21927" fg:w="67"/><text x="23.4350%" y="1951.50"></text></g><g><title>kswapd (88 samples, 0.09%)</title><rect x="23.1734%" y="2021" width="0.0930%" height="15" fill="rgb(250,179,40)" fg:x="21916" fg:w="88"/><text x="23.4234%" y="2031.50"></text></g><g><title>balance_pgdat (88 samples, 0.09%)</title><rect x="23.1734%" y="2005" width="0.0930%" height="15" fill="rgb(242,44,2)" fg:x="21916" fg:w="88"/><text x="23.4234%" y="2015.50"></text></g><g><title>shrink_node (88 samples, 0.09%)</title><rect x="23.1734%" y="1989" width="0.0930%" height="15" fill="rgb(216,177,13)" fg:x="21916" fg:w="88"/><text x="23.4234%" y="1999.50"></text></g><g><title>shrink_slab (10 samples, 0.01%)</title><rect x="23.2559%" y="1973" width="0.0106%" height="15" fill="rgb(216,106,43)" fg:x="21994" fg:w="10"/><text x="23.5059%" y="1983.50"></text></g><g><title>__lock_text_start (10 samples, 0.01%)</title><rect x="23.2781%" y="1941" width="0.0106%" height="15" fill="rgb(216,183,2)" fg:x="22015" fg:w="10"/><text x="23.5281%" y="1951.50"></text></g><g><title>__lock_text_start (33 samples, 0.03%)</title><rect x="23.3108%" y="1909" width="0.0349%" height="15" fill="rgb(249,75,3)" fg:x="22046" fg:w="33"/><text x="23.5608%" y="1919.50"></text></g><g><title>ext4_end_io_rsv_work (74 samples, 0.08%)</title><rect x="23.2707%" y="1989" width="0.0782%" height="15" fill="rgb(219,67,39)" fg:x="22008" fg:w="74"/><text x="23.5207%" y="1999.50"></text></g><g><title>ext4_release_io_end (73 samples, 0.08%)</title><rect x="23.2717%" y="1973" width="0.0772%" height="15" fill="rgb(253,228,2)" fg:x="22009" fg:w="73"/><text x="23.5217%" y="1983.50"></text></g><g><title>ext4_finish_bio (72 samples, 0.08%)</title><rect x="23.2728%" y="1957" width="0.0761%" height="15" fill="rgb(235,138,27)" fg:x="22010" fg:w="72"/><text x="23.5228%" y="1967.50"></text></g><g><title>end_page_writeback (57 samples, 0.06%)</title><rect x="23.2886%" y="1941" width="0.0603%" height="15" fill="rgb(236,97,51)" fg:x="22025" fg:w="57"/><text x="23.5386%" y="1951.50"></text></g><g><title>test_clear_page_writeback (46 samples, 0.05%)</title><rect x="23.3003%" y="1925" width="0.0486%" height="15" fill="rgb(240,80,30)" fg:x="22036" fg:w="46"/><text x="23.5503%" y="1935.50"></text></g><g><title>blk_mq_submit_bio (18 samples, 0.02%)</title><rect x="23.3521%" y="1829" width="0.0190%" height="15" fill="rgb(230,178,19)" fg:x="22085" fg:w="18"/><text x="23.6021%" y="1839.50"></text></g><g><title>ext4_io_submit (19 samples, 0.02%)</title><rect x="23.3521%" y="1877" width="0.0201%" height="15" fill="rgb(210,190,27)" fg:x="22085" fg:w="19"/><text x="23.6021%" y="1887.50"></text></g><g><title>submit_bio (19 samples, 0.02%)</title><rect x="23.3521%" y="1861" width="0.0201%" height="15" fill="rgb(222,107,31)" fg:x="22085" fg:w="19"/><text x="23.6021%" y="1871.50"></text></g><g><title>submit_bio_noacct (19 samples, 0.02%)</title><rect x="23.3521%" y="1845" width="0.0201%" height="15" fill="rgb(216,127,34)" fg:x="22085" fg:w="19"/><text x="23.6021%" y="1855.50"></text></g><g><title>clear_page_dirty_for_io (26 samples, 0.03%)</title><rect x="23.3901%" y="1845" width="0.0275%" height="15" fill="rgb(234,116,52)" fg:x="22121" fg:w="26"/><text x="23.6401%" y="1855.50"></text></g><g><title>__lock_text_start (20 samples, 0.02%)</title><rect x="23.4504%" y="1813" width="0.0211%" height="15" fill="rgb(222,124,15)" fg:x="22178" fg:w="20"/><text x="23.7004%" y="1823.50"></text></g><g><title>__test_set_page_writeback (37 samples, 0.04%)</title><rect x="23.4367%" y="1829" width="0.0391%" height="15" fill="rgb(231,179,28)" fg:x="22165" fg:w="37"/><text x="23.6867%" y="1839.50"></text></g><g><title>mpage_submit_page (90 samples, 0.10%)</title><rect x="23.3891%" y="1861" width="0.0952%" height="15" fill="rgb(226,93,45)" fg:x="22120" fg:w="90"/><text x="23.6391%" y="1871.50"></text></g><g><title>ext4_bio_write_page (63 samples, 0.07%)</title><rect x="23.4176%" y="1845" width="0.0666%" height="15" fill="rgb(215,8,51)" fg:x="22147" fg:w="63"/><text x="23.6676%" y="1855.50"></text></g><g><title>mpage_map_and_submit_buffers (107 samples, 0.11%)</title><rect x="23.3764%" y="1877" width="0.1131%" height="15" fill="rgb(223,106,5)" fg:x="22108" fg:w="107"/><text x="23.6264%" y="1887.50"></text></g><g><title>__writeback_inodes_wb (149 samples, 0.16%)</title><rect x="23.3510%" y="1957" width="0.1575%" height="15" fill="rgb(250,191,5)" fg:x="22084" fg:w="149"/><text x="23.6010%" y="1967.50"></text></g><g><title>writeback_sb_inodes (149 samples, 0.16%)</title><rect x="23.3510%" y="1941" width="0.1575%" height="15" fill="rgb(242,132,44)" fg:x="22084" fg:w="149"/><text x="23.6010%" y="1951.50"></text></g><g><title>__writeback_single_inode (149 samples, 0.16%)</title><rect x="23.3510%" y="1925" width="0.1575%" height="15" fill="rgb(251,152,29)" fg:x="22084" fg:w="149"/><text x="23.6010%" y="1935.50"></text></g><g><title>do_writepages (149 samples, 0.16%)</title><rect x="23.3510%" y="1909" width="0.1575%" height="15" fill="rgb(218,179,5)" fg:x="22084" fg:w="149"/><text x="23.6010%" y="1919.50"></text></g><g><title>ext4_writepages (149 samples, 0.16%)</title><rect x="23.3510%" y="1893" width="0.1575%" height="15" fill="rgb(227,67,19)" fg:x="22084" fg:w="149"/><text x="23.6010%" y="1903.50"></text></g><g><title>mpage_prepare_extent_to_map (18 samples, 0.02%)</title><rect x="23.4895%" y="1877" width="0.0190%" height="15" fill="rgb(233,119,31)" fg:x="22215" fg:w="18"/><text x="23.7395%" y="1887.50"></text></g><g><title>process_one_work (226 samples, 0.24%)</title><rect x="23.2707%" y="2005" width="0.2390%" height="15" fill="rgb(241,120,22)" fg:x="22008" fg:w="226"/><text x="23.5207%" y="2015.50"></text></g><g><title>wb_workfn (150 samples, 0.16%)</title><rect x="23.3510%" y="1989" width="0.1586%" height="15" fill="rgb(224,102,30)" fg:x="22084" fg:w="150"/><text x="23.6010%" y="1999.50"></text></g><g><title>wb_writeback (150 samples, 0.16%)</title><rect x="23.3510%" y="1973" width="0.1586%" height="15" fill="rgb(210,164,37)" fg:x="22084" fg:w="150"/><text x="23.6010%" y="1983.50"></text></g><g><title>ret_from_fork (320 samples, 0.34%)</title><rect x="23.1723%" y="2053" width="0.3384%" height="15" fill="rgb(226,191,16)" fg:x="21915" fg:w="320"/><text x="23.4223%" y="2063.50"></text></g><g><title>kthread (320 samples, 0.34%)</title><rect x="23.1723%" y="2037" width="0.3384%" height="15" fill="rgb(214,40,45)" fg:x="21915" fg:w="320"/><text x="23.4223%" y="2047.50"></text></g><g><title>worker_thread (227 samples, 0.24%)</title><rect x="23.2707%" y="2021" width="0.2400%" height="15" fill="rgb(244,29,26)" fg:x="22008" fg:w="227"/><text x="23.5207%" y="2031.50"></text></g><g><title>scsi_io_completion (12 samples, 0.01%)</title><rect x="89.9973%" y="1829" width="0.0127%" height="15" fill="rgb(216,16,5)" fg:x="85114" fg:w="12"/><text x="90.2473%" y="1839.50"></text></g><g><title>scsi_end_request (12 samples, 0.01%)</title><rect x="89.9973%" y="1813" width="0.0127%" height="15" fill="rgb(249,76,35)" fg:x="85114" fg:w="12"/><text x="90.2473%" y="1823.50"></text></g><g><title>asm_sysvec_hyperv_callback (95 samples, 0.10%)</title><rect x="89.9105%" y="1973" width="0.1005%" height="15" fill="rgb(207,11,44)" fg:x="85032" fg:w="95"/><text x="90.1605%" y="1983.50"></text></g><g><title>sysvec_hyperv_callback (95 samples, 0.10%)</title><rect x="89.9105%" y="1957" width="0.1005%" height="15" fill="rgb(228,190,49)" fg:x="85032" fg:w="95"/><text x="90.1605%" y="1967.50"></text></g><g><title>irq_exit_rcu (95 samples, 0.10%)</title><rect x="89.9105%" y="1941" width="0.1005%" height="15" fill="rgb(214,173,12)" fg:x="85032" fg:w="95"/><text x="90.1605%" y="1951.50"></text></g><g><title>do_softirq_own_stack (95 samples, 0.10%)</title><rect x="89.9105%" y="1925" width="0.1005%" height="15" fill="rgb(218,26,35)" fg:x="85032" fg:w="95"/><text x="90.1605%" y="1935.50"></text></g><g><title>asm_call_sysvec_on_stack (95 samples, 0.10%)</title><rect x="89.9105%" y="1909" width="0.1005%" height="15" fill="rgb(220,200,19)" fg:x="85032" fg:w="95"/><text x="90.1605%" y="1919.50"></text></g><g><title>__softirqentry_text_start (95 samples, 0.10%)</title><rect x="89.9105%" y="1893" width="0.1005%" height="15" fill="rgb(239,95,49)" fg:x="85032" fg:w="95"/><text x="90.1605%" y="1903.50"></text></g><g><title>tasklet_action_common.isra.0 (17 samples, 0.02%)</title><rect x="89.9930%" y="1877" width="0.0180%" height="15" fill="rgb(235,85,53)" fg:x="85110" fg:w="17"/><text x="90.2430%" y="1887.50"></text></g><g><title>vmbus_on_event (17 samples, 0.02%)</title><rect x="89.9930%" y="1861" width="0.0180%" height="15" fill="rgb(233,133,31)" fg:x="85110" fg:w="17"/><text x="90.2430%" y="1871.50"></text></g><g><title>storvsc_on_channel_callback (16 samples, 0.02%)</title><rect x="89.9941%" y="1845" width="0.0169%" height="15" fill="rgb(218,25,20)" fg:x="85111" fg:w="16"/><text x="90.2441%" y="1855.50"></text></g><g><title>default_idle_call (62,897 samples, 66.51%)</title><rect x="23.5160%" y="2005" width="66.5056%" height="15" fill="rgb(252,210,38)" fg:x="22240" fg:w="62897"/><text x="23.7660%" y="2015.50">default_idle_call</text></g><g><title>default_idle (62,890 samples, 66.50%)</title><rect x="23.5234%" y="1989" width="66.4982%" height="15" fill="rgb(242,134,21)" fg:x="22247" fg:w="62890"/><text x="23.7734%" y="1999.50">default_idle</text></g><g><title>asm_sysvec_hyperv_stimer0 (10 samples, 0.01%)</title><rect x="90.0110%" y="1973" width="0.0106%" height="15" fill="rgb(213,28,48)" fg:x="85127" fg:w="10"/><text x="90.2610%" y="1983.50"></text></g><g><title>sysvec_hyperv_stimer0 (10 samples, 0.01%)</title><rect x="90.0110%" y="1957" width="0.0106%" height="15" fill="rgb(250,196,2)" fg:x="85127" fg:w="10"/><text x="90.2610%" y="1967.50"></text></g><g><title>irq_exit_rcu (10 samples, 0.01%)</title><rect x="90.0110%" y="1941" width="0.0106%" height="15" fill="rgb(227,5,17)" fg:x="85127" fg:w="10"/><text x="90.2610%" y="1951.50"></text></g><g><title>do_softirq_own_stack (10 samples, 0.01%)</title><rect x="90.0110%" y="1925" width="0.0106%" height="15" fill="rgb(221,226,24)" fg:x="85127" fg:w="10"/><text x="90.2610%" y="1935.50"></text></g><g><title>asm_call_sysvec_on_stack (10 samples, 0.01%)</title><rect x="90.0110%" y="1909" width="0.0106%" height="15" fill="rgb(211,5,48)" fg:x="85127" fg:w="10"/><text x="90.2610%" y="1919.50"></text></g><g><title>__softirqentry_text_start (10 samples, 0.01%)</title><rect x="90.0110%" y="1893" width="0.0106%" height="15" fill="rgb(219,150,6)" fg:x="85127" fg:w="10"/><text x="90.2610%" y="1903.50"></text></g><g><title>schedule_idle (52 samples, 0.05%)</title><rect x="90.0237%" y="2005" width="0.0550%" height="15" fill="rgb(251,46,16)" fg:x="85139" fg:w="52"/><text x="90.2737%" y="2015.50"></text></g><g><title>__sched_text_start (51 samples, 0.05%)</title><rect x="90.0247%" y="1989" width="0.0539%" height="15" fill="rgb(220,204,40)" fg:x="85140" fg:w="51"/><text x="90.2747%" y="1999.50"></text></g><g><title>finish_task_switch (50 samples, 0.05%)</title><rect x="90.0258%" y="1973" width="0.0529%" height="15" fill="rgb(211,85,2)" fg:x="85141" fg:w="50"/><text x="90.2758%" y="1983.50"></text></g><g><title>cpu_startup_entry (62,982 samples, 66.60%)</title><rect x="23.5107%" y="2037" width="66.5955%" height="15" fill="rgb(229,17,7)" fg:x="22235" fg:w="62982"/><text x="23.7607%" y="2047.50">cpu_startup_entry</text></g><g><title>do_idle (62,982 samples, 66.60%)</title><rect x="23.5107%" y="2021" width="66.5955%" height="15" fill="rgb(239,72,28)" fg:x="22235" fg:w="62982"/><text x="23.7607%" y="2031.50">do_idle</text></g><g><title>tick_nohz_idle_exit (19 samples, 0.02%)</title><rect x="90.0861%" y="2005" width="0.0201%" height="15" fill="rgb(230,47,54)" fg:x="85198" fg:w="19"/><text x="90.3361%" y="2015.50"></text></g><g><title>asm_sysvec_call_function_single (23 samples, 0.02%)</title><rect x="96.2611%" y="1957" width="0.0243%" height="15" fill="rgb(214,50,8)" fg:x="91038" fg:w="23"/><text x="96.5111%" y="1967.50"></text></g><g><title>sysvec_call_function_single (23 samples, 0.02%)</title><rect x="96.2611%" y="1941" width="0.0243%" height="15" fill="rgb(216,198,43)" fg:x="91038" fg:w="23"/><text x="96.5111%" y="1951.50"></text></g><g><title>irq_exit_rcu (23 samples, 0.02%)</title><rect x="96.2611%" y="1925" width="0.0243%" height="15" fill="rgb(234,20,35)" fg:x="91038" fg:w="23"/><text x="96.5111%" y="1935.50"></text></g><g><title>do_softirq_own_stack (23 samples, 0.02%)</title><rect x="96.2611%" y="1909" width="0.0243%" height="15" fill="rgb(254,45,19)" fg:x="91038" fg:w="23"/><text x="96.5111%" y="1919.50"></text></g><g><title>asm_call_sysvec_on_stack (23 samples, 0.02%)</title><rect x="96.2611%" y="1893" width="0.0243%" height="15" fill="rgb(219,14,44)" fg:x="91038" fg:w="23"/><text x="96.5111%" y="1903.50"></text></g><g><title>__softirqentry_text_start (23 samples, 0.02%)</title><rect x="96.2611%" y="1877" width="0.0243%" height="15" fill="rgb(217,220,26)" fg:x="91038" fg:w="23"/><text x="96.5111%" y="1887.50"></text></g><g><title>asm_sysvec_hyperv_callback (19 samples, 0.02%)</title><rect x="96.2854%" y="1957" width="0.0201%" height="15" fill="rgb(213,158,28)" fg:x="91061" fg:w="19"/><text x="96.5354%" y="1967.50"></text></g><g><title>sysvec_hyperv_callback (19 samples, 0.02%)</title><rect x="96.2854%" y="1941" width="0.0201%" height="15" fill="rgb(252,51,52)" fg:x="91061" fg:w="19"/><text x="96.5354%" y="1951.50"></text></g><g><title>irq_exit_rcu (19 samples, 0.02%)</title><rect x="96.2854%" y="1925" width="0.0201%" height="15" fill="rgb(246,89,16)" fg:x="91061" fg:w="19"/><text x="96.5354%" y="1935.50"></text></g><g><title>do_softirq_own_stack (19 samples, 0.02%)</title><rect x="96.2854%" y="1909" width="0.0201%" height="15" fill="rgb(216,158,49)" fg:x="91061" fg:w="19"/><text x="96.5354%" y="1919.50"></text></g><g><title>asm_call_sysvec_on_stack (19 samples, 0.02%)</title><rect x="96.2854%" y="1893" width="0.0201%" height="15" fill="rgb(236,107,19)" fg:x="91061" fg:w="19"/><text x="96.5354%" y="1903.50"></text></g><g><title>__softirqentry_text_start (19 samples, 0.02%)</title><rect x="96.2854%" y="1877" width="0.0201%" height="15" fill="rgb(228,185,30)" fg:x="91061" fg:w="19"/><text x="96.5354%" y="1887.50"></text></g><g><title>default_idle_call (5,865 samples, 6.20%)</title><rect x="90.1062%" y="1989" width="6.2015%" height="15" fill="rgb(246,134,8)" fg:x="85217" fg:w="5865"/><text x="90.3562%" y="1999.50">default_..</text></g><g><title>default_idle (5,863 samples, 6.20%)</title><rect x="90.1083%" y="1973" width="6.1994%" height="15" fill="rgb(214,143,50)" fg:x="85219" fg:w="5863"/><text x="90.3583%" y="1983.50">default_..</text></g><g><title>swapper (69,175 samples, 73.14%)</title><rect x="23.1702%" y="2069" width="73.1438%" height="15" fill="rgb(228,75,8)" fg:x="21913" fg:w="69175"/><text x="23.4202%" y="2079.50">swapper</text></g><g><title>secondary_startup_64_no_verify (68,853 samples, 72.80%)</title><rect x="23.5107%" y="2053" width="72.8033%" height="15" fill="rgb(207,175,4)" fg:x="22235" fg:w="68853"/><text x="23.7607%" y="2063.50">secondary_startup_64_no_verify</text></g><g><title>start_kernel (5,871 samples, 6.21%)</title><rect x="90.1062%" y="2037" width="6.2078%" height="15" fill="rgb(205,108,24)" fg:x="85217" fg:w="5871"/><text x="90.3562%" y="2047.50">start_ke..</text></g><g><title>cpu_startup_entry (5,871 samples, 6.21%)</title><rect x="90.1062%" y="2021" width="6.2078%" height="15" fill="rgb(244,120,49)" fg:x="85217" fg:w="5871"/><text x="90.3562%" y="2031.50">cpu_star..</text></g><g><title>do_idle (5,871 samples, 6.21%)</title><rect x="90.1062%" y="2005" width="6.2078%" height="15" fill="rgb(223,47,38)" fg:x="85217" fg:w="5871"/><text x="90.3562%" y="2015.50">do_idle</text></g><g><title>__wake_up_common_lock (98 samples, 0.10%)</title><rect x="96.3299%" y="1893" width="0.1036%" height="15" fill="rgb(229,179,11)" fg:x="91103" fg:w="98"/><text x="96.5799%" y="1903.50"></text></g><g><title>__lock_text_start (98 samples, 0.10%)</title><rect x="96.3299%" y="1877" width="0.1036%" height="15" fill="rgb(231,122,1)" fg:x="91103" fg:w="98"/><text x="96.5799%" y="1887.50"></text></g><g><title>__fsnotify_parent (106 samples, 0.11%)</title><rect x="96.3225%" y="1957" width="0.1121%" height="15" fill="rgb(245,119,9)" fg:x="91096" fg:w="106"/><text x="96.5725%" y="1967.50"></text></g><g><title>fsnotify (104 samples, 0.11%)</title><rect x="96.3246%" y="1941" width="0.1100%" height="15" fill="rgb(241,163,25)" fg:x="91098" fg:w="104"/><text x="96.5746%" y="1951.50"></text></g><g><title>inotify_handle_inode_event (102 samples, 0.11%)</title><rect x="96.3267%" y="1925" width="0.1079%" height="15" fill="rgb(217,214,3)" fg:x="91100" fg:w="102"/><text x="96.5767%" y="1935.50"></text></g><g><title>fsnotify_add_event (99 samples, 0.10%)</title><rect x="96.3299%" y="1909" width="0.1047%" height="15" fill="rgb(240,86,28)" fg:x="91103" fg:w="99"/><text x="96.5799%" y="1919.50"></text></g><g><title>__slab_alloc.isra.0.constprop.0 (10 samples, 0.01%)</title><rect x="96.4789%" y="1781" width="0.0106%" height="15" fill="rgb(215,47,9)" fg:x="91244" fg:w="10"/><text x="96.7289%" y="1791.50"></text></g><g><title>create_page_buffers (33 samples, 0.03%)</title><rect x="96.4589%" y="1861" width="0.0349%" height="15" fill="rgb(252,25,45)" fg:x="91225" fg:w="33"/><text x="96.7089%" y="1871.50"></text></g><g><title>create_empty_buffers (29 samples, 0.03%)</title><rect x="96.4631%" y="1845" width="0.0307%" height="15" fill="rgb(251,164,9)" fg:x="91229" fg:w="29"/><text x="96.7131%" y="1855.50"></text></g><g><title>alloc_page_buffers (20 samples, 0.02%)</title><rect x="96.4726%" y="1829" width="0.0211%" height="15" fill="rgb(233,194,0)" fg:x="91238" fg:w="20"/><text x="96.7226%" y="1839.50"></text></g><g><title>alloc_buffer_head (19 samples, 0.02%)</title><rect x="96.4737%" y="1813" width="0.0201%" height="15" fill="rgb(249,111,24)" fg:x="91239" fg:w="19"/><text x="96.7237%" y="1823.50"></text></g><g><title>kmem_cache_alloc (18 samples, 0.02%)</title><rect x="96.4747%" y="1797" width="0.0190%" height="15" fill="rgb(250,223,3)" fg:x="91240" fg:w="18"/><text x="96.7247%" y="1807.50"></text></g><g><title>ext4_es_lookup_extent (10 samples, 0.01%)</title><rect x="96.5234%" y="1845" width="0.0106%" height="15" fill="rgb(236,178,37)" fg:x="91286" fg:w="10"/><text x="96.7734%" y="1855.50"></text></g><g><title>ext4_da_get_block_prep (39 samples, 0.04%)</title><rect x="96.4938%" y="1861" width="0.0412%" height="15" fill="rgb(241,158,50)" fg:x="91258" fg:w="39"/><text x="96.7438%" y="1871.50"></text></g><g><title>__block_write_begin_int (85 samples, 0.09%)</title><rect x="96.4493%" y="1877" width="0.0899%" height="15" fill="rgb(213,121,41)" fg:x="91216" fg:w="85"/><text x="96.6993%" y="1887.50"></text></g><g><title>__ext4_journal_start_sb (27 samples, 0.03%)</title><rect x="96.5392%" y="1877" width="0.0285%" height="15" fill="rgb(240,92,3)" fg:x="91301" fg:w="27"/><text x="96.7892%" y="1887.50"></text></g><g><title>jbd2__journal_start (26 samples, 0.03%)</title><rect x="96.5403%" y="1861" width="0.0275%" height="15" fill="rgb(205,123,3)" fg:x="91302" fg:w="26"/><text x="96.7903%" y="1871.50"></text></g><g><title>start_this_handle (23 samples, 0.02%)</title><rect x="96.5434%" y="1845" width="0.0243%" height="15" fill="rgb(205,97,47)" fg:x="91305" fg:w="23"/><text x="96.7934%" y="1855.50"></text></g><g><title>__alloc_pages_nodemask (26 samples, 0.03%)</title><rect x="96.5699%" y="1845" width="0.0275%" height="15" fill="rgb(247,152,14)" fg:x="91330" fg:w="26"/><text x="96.8199%" y="1855.50"></text></g><g><title>get_page_from_freelist (24 samples, 0.03%)</title><rect x="96.5720%" y="1829" width="0.0254%" height="15" fill="rgb(248,195,53)" fg:x="91332" fg:w="24"/><text x="96.8220%" y="1839.50"></text></g><g><title>mem_cgroup_charge (15 samples, 0.02%)</title><rect x="96.6249%" y="1813" width="0.0159%" height="15" fill="rgb(226,201,16)" fg:x="91382" fg:w="15"/><text x="96.8749%" y="1823.50"></text></g><g><title>__add_to_page_cache_locked (44 samples, 0.05%)</title><rect x="96.5984%" y="1829" width="0.0465%" height="15" fill="rgb(205,98,0)" fg:x="91357" fg:w="44"/><text x="96.8484%" y="1839.50"></text></g><g><title>__lock_text_start (15 samples, 0.02%)</title><rect x="96.6471%" y="1797" width="0.0159%" height="15" fill="rgb(214,191,48)" fg:x="91403" fg:w="15"/><text x="96.8971%" y="1807.50"></text></g><g><title>add_to_page_cache_lru (67 samples, 0.07%)</title><rect x="96.5974%" y="1845" width="0.0708%" height="15" fill="rgb(237,112,39)" fg:x="91356" fg:w="67"/><text x="96.8474%" y="1855.50"></text></g><g><title>lru_cache_add (22 samples, 0.02%)</title><rect x="96.6450%" y="1829" width="0.0233%" height="15" fill="rgb(247,203,27)" fg:x="91401" fg:w="22"/><text x="96.8950%" y="1839.50"></text></g><g><title>pagevec_lru_move_fn (20 samples, 0.02%)</title><rect x="96.6471%" y="1813" width="0.0211%" height="15" fill="rgb(235,124,28)" fg:x="91403" fg:w="20"/><text x="96.8971%" y="1823.50"></text></g><g><title>grab_cache_page_write_begin (110 samples, 0.12%)</title><rect x="96.5699%" y="1877" width="0.1163%" height="15" fill="rgb(208,207,46)" fg:x="91330" fg:w="110"/><text x="96.8199%" y="1887.50"></text></g><g><title>pagecache_get_page (110 samples, 0.12%)</title><rect x="96.5699%" y="1861" width="0.1163%" height="15" fill="rgb(234,176,4)" fg:x="91330" fg:w="110"/><text x="96.8199%" y="1871.50"></text></g><g><title>find_get_entry (17 samples, 0.02%)</title><rect x="96.6682%" y="1845" width="0.0180%" height="15" fill="rgb(230,133,28)" fg:x="91423" fg:w="17"/><text x="96.9182%" y="1855.50"></text></g><g><title>xas_load (14 samples, 0.01%)</title><rect x="96.6714%" y="1829" width="0.0148%" height="15" fill="rgb(211,137,40)" fg:x="91426" fg:w="14"/><text x="96.9214%" y="1839.50"></text></g><g><title>ext4_da_write_begin (235 samples, 0.25%)</title><rect x="96.4419%" y="1893" width="0.2485%" height="15" fill="rgb(254,35,13)" fg:x="91209" fg:w="235"/><text x="96.6919%" y="1903.50"></text></g><g><title>__ext4_journal_stop (32 samples, 0.03%)</title><rect x="96.6968%" y="1877" width="0.0338%" height="15" fill="rgb(225,49,51)" fg:x="91450" fg:w="32"/><text x="96.9468%" y="1887.50"></text></g><g><title>jbd2_journal_stop (31 samples, 0.03%)</title><rect x="96.6978%" y="1861" width="0.0328%" height="15" fill="rgb(251,10,15)" fg:x="91451" fg:w="31"/><text x="96.9478%" y="1871.50"></text></g><g><title>stop_this_handle (21 samples, 0.02%)</title><rect x="96.7084%" y="1845" width="0.0222%" height="15" fill="rgb(228,207,15)" fg:x="91461" fg:w="21"/><text x="96.9584%" y="1855.50"></text></g><g><title>__wake_up_common_lock (16 samples, 0.02%)</title><rect x="96.7137%" y="1829" width="0.0169%" height="15" fill="rgb(241,99,19)" fg:x="91466" fg:w="16"/><text x="96.9637%" y="1839.50"></text></g><g><title>chksum_update (89 samples, 0.09%)</title><rect x="96.7814%" y="1765" width="0.0941%" height="15" fill="rgb(207,104,49)" fg:x="91530" fg:w="89"/><text x="97.0314%" y="1775.50"></text></g><g><title>__crc32c_le (85 samples, 0.09%)</title><rect x="96.7856%" y="1749" width="0.0899%" height="15" fill="rgb(234,99,18)" fg:x="91534" fg:w="85"/><text x="97.0356%" y="1759.50"></text></g><g><title>ext4_inode_csum_set (96 samples, 0.10%)</title><rect x="96.7750%" y="1797" width="0.1015%" height="15" fill="rgb(213,191,49)" fg:x="91524" fg:w="96"/><text x="97.0250%" y="1807.50"></text></g><g><title>ext4_inode_csum.isra.0 (94 samples, 0.10%)</title><rect x="96.7771%" y="1781" width="0.0994%" height="15" fill="rgb(210,226,19)" fg:x="91526" fg:w="94"/><text x="97.0271%" y="1791.50"></text></g><g><title>ext4_mark_iloc_dirty (124 samples, 0.13%)</title><rect x="96.7465%" y="1813" width="0.1311%" height="15" fill="rgb(229,97,18)" fg:x="91497" fg:w="124"/><text x="96.9965%" y="1823.50"></text></g><g><title>__mark_inode_dirty (154 samples, 0.16%)</title><rect x="96.7317%" y="1861" width="0.1628%" height="15" fill="rgb(211,167,15)" fg:x="91483" fg:w="154"/><text x="96.9817%" y="1871.50"></text></g><g><title>ext4_dirty_inode (150 samples, 0.16%)</title><rect x="96.7359%" y="1845" width="0.1586%" height="15" fill="rgb(210,169,34)" fg:x="91487" fg:w="150"/><text x="96.9859%" y="1855.50"></text></g><g><title>__ext4_mark_inode_dirty (140 samples, 0.15%)</title><rect x="96.7465%" y="1829" width="0.1480%" height="15" fill="rgb(241,121,31)" fg:x="91497" fg:w="140"/><text x="96.9965%" y="1839.50"></text></g><g><title>ext4_reserve_inode_write (16 samples, 0.02%)</title><rect x="96.8776%" y="1813" width="0.0169%" height="15" fill="rgb(232,40,11)" fg:x="91621" fg:w="16"/><text x="97.1276%" y="1823.50"></text></g><g><title>__lock_text_start (20 samples, 0.02%)</title><rect x="97.0193%" y="1813" width="0.0211%" height="15" fill="rgb(205,86,26)" fg:x="91755" fg:w="20"/><text x="97.2693%" y="1823.50"></text></g><g><title>block_write_end (148 samples, 0.16%)</title><rect x="96.8945%" y="1861" width="0.1565%" height="15" fill="rgb(231,126,28)" fg:x="91637" fg:w="148"/><text x="97.1445%" y="1871.50"></text></g><g><title>__block_commit_write.isra.0 (147 samples, 0.16%)</title><rect x="96.8956%" y="1845" width="0.1554%" height="15" fill="rgb(219,221,18)" fg:x="91638" fg:w="147"/><text x="97.1456%" y="1855.50"></text></g><g><title>mark_buffer_dirty (39 samples, 0.04%)</title><rect x="97.0097%" y="1829" width="0.0412%" height="15" fill="rgb(211,40,0)" fg:x="91746" fg:w="39"/><text x="97.2597%" y="1839.50"></text></g><g><title>ext4_da_write_end (345 samples, 0.36%)</title><rect x="96.6904%" y="1893" width="0.3648%" height="15" fill="rgb(239,85,43)" fg:x="91444" fg:w="345"/><text x="96.9404%" y="1903.50"></text></g><g><title>generic_write_end (307 samples, 0.32%)</title><rect x="96.7306%" y="1877" width="0.3246%" height="15" fill="rgb(231,55,21)" fg:x="91482" fg:w="307"/><text x="96.9806%" y="1887.50"></text></g><g><title>iov_iter_copy_from_user_atomic (370 samples, 0.39%)</title><rect x="97.0573%" y="1893" width="0.3912%" height="15" fill="rgb(225,184,43)" fg:x="91791" fg:w="370"/><text x="97.3073%" y="1903.50"></text></g><g><title>copyin (365 samples, 0.39%)</title><rect x="97.0626%" y="1877" width="0.3859%" height="15" fill="rgb(251,158,41)" fg:x="91796" fg:w="365"/><text x="97.3126%" y="1887.50"></text></g><g><title>copy_user_enhanced_fast_string (364 samples, 0.38%)</title><rect x="97.0637%" y="1861" width="0.3849%" height="15" fill="rgb(234,159,37)" fg:x="91797" fg:w="364"/><text x="97.3137%" y="1871.50"></text></g><g><title>asm_sysvec_hyperv_callback (16 samples, 0.02%)</title><rect x="97.4316%" y="1845" width="0.0169%" height="15" fill="rgb(216,204,22)" fg:x="92145" fg:w="16"/><text x="97.6816%" y="1855.50"></text></g><g><title>sysvec_hyperv_callback (16 samples, 0.02%)</title><rect x="97.4316%" y="1829" width="0.0169%" height="15" fill="rgb(214,17,3)" fg:x="92145" fg:w="16"/><text x="97.6816%" y="1839.50"></text></g><g><title>irq_exit_rcu (16 samples, 0.02%)</title><rect x="97.4316%" y="1813" width="0.0169%" height="15" fill="rgb(212,111,17)" fg:x="92145" fg:w="16"/><text x="97.6816%" y="1823.50"></text></g><g><title>do_softirq_own_stack (16 samples, 0.02%)</title><rect x="97.4316%" y="1797" width="0.0169%" height="15" fill="rgb(221,157,24)" fg:x="92145" fg:w="16"/><text x="97.6816%" y="1807.50"></text></g><g><title>asm_call_sysvec_on_stack (16 samples, 0.02%)</title><rect x="97.4316%" y="1781" width="0.0169%" height="15" fill="rgb(252,16,13)" fg:x="92145" fg:w="16"/><text x="97.6816%" y="1791.50"></text></g><g><title>__softirqentry_text_start (16 samples, 0.02%)</title><rect x="97.4316%" y="1765" width="0.0169%" height="15" fill="rgb(221,62,2)" fg:x="92145" fg:w="16"/><text x="97.6816%" y="1775.50"></text></g><g><title>__GI___libc_write (1,104 samples, 1.17%)</title><rect x="96.3161%" y="2053" width="1.1673%" height="15" fill="rgb(247,87,22)" fg:x="91090" fg:w="1104"/><text x="96.5661%" y="2063.50"></text></g><g><title>__GI___libc_write (1,104 samples, 1.17%)</title><rect x="96.3161%" y="2037" width="1.1673%" height="15" fill="rgb(215,73,9)" fg:x="91090" fg:w="1104"/><text x="96.5661%" y="2047.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,102 samples, 1.17%)</title><rect x="96.3182%" y="2021" width="1.1652%" height="15" fill="rgb(207,175,33)" fg:x="91092" fg:w="1102"/><text x="96.5682%" y="2031.50"></text></g><g><title>do_syscall_64 (1,102 samples, 1.17%)</title><rect x="96.3182%" y="2005" width="1.1652%" height="15" fill="rgb(243,129,54)" fg:x="91092" fg:w="1102"/><text x="96.5682%" y="2015.50"></text></g><g><title>ksys_write (1,102 samples, 1.17%)</title><rect x="96.3182%" y="1989" width="1.1652%" height="15" fill="rgb(227,119,45)" fg:x="91092" fg:w="1102"/><text x="96.5682%" y="1999.50"></text></g><g><title>vfs_write (1,099 samples, 1.16%)</title><rect x="96.3214%" y="1973" width="1.1621%" height="15" fill="rgb(205,109,36)" fg:x="91095" fg:w="1099"/><text x="96.5714%" y="1983.50"></text></g><g><title>new_sync_write (992 samples, 1.05%)</title><rect x="96.4345%" y="1957" width="1.0489%" height="15" fill="rgb(205,6,39)" fg:x="91202" fg:w="992"/><text x="96.6845%" y="1967.50"></text></g><g><title>ext4_file_write_iter (991 samples, 1.05%)</title><rect x="96.4356%" y="1941" width="1.0479%" height="15" fill="rgb(221,32,16)" fg:x="91203" fg:w="991"/><text x="96.6856%" y="1951.50"></text></g><g><title>ext4_buffered_write_iter (991 samples, 1.05%)</title><rect x="96.4356%" y="1925" width="1.0479%" height="15" fill="rgb(228,144,50)" fg:x="91203" fg:w="991"/><text x="96.6856%" y="1935.50"></text></g><g><title>generic_perform_write (990 samples, 1.05%)</title><rect x="96.4367%" y="1909" width="1.0468%" height="15" fill="rgb(229,201,53)" fg:x="91204" fg:w="990"/><text x="96.6867%" y="1919.50"></text></g><g><title>iov_iter_fault_in_readable (33 samples, 0.03%)</title><rect x="97.4486%" y="1893" width="0.0349%" height="15" fill="rgb(249,153,27)" fg:x="92161" fg:w="33"/><text x="97.6986%" y="1903.50"></text></g><g><title>__get_user_nocheck_1 (29 samples, 0.03%)</title><rect x="97.4528%" y="1877" width="0.0307%" height="15" fill="rgb(227,106,25)" fg:x="92165" fg:w="29"/><text x="97.7028%" y="1887.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (17 samples, 0.02%)</title><rect x="97.5141%" y="1941" width="0.0180%" height="15" fill="rgb(230,65,29)" fg:x="92223" fg:w="17"/><text x="97.7641%" y="1951.50"></text></g><g><title>start_thread (31 samples, 0.03%)</title><rect x="97.5004%" y="2053" width="0.0328%" height="15" fill="rgb(221,57,46)" fg:x="92210" fg:w="31"/><text x="97.7504%" y="2063.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (31 samples, 0.03%)</title><rect x="97.5004%" y="2037" width="0.0328%" height="15" fill="rgb(229,161,17)" fg:x="92210" fg:w="31"/><text x="97.7504%" y="2047.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (31 samples, 0.03%)</title><rect x="97.5004%" y="2021" width="0.0328%" height="15" fill="rgb(222,213,11)" fg:x="92210" fg:w="31"/><text x="97.7504%" y="2031.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (31 samples, 0.03%)</title><rect x="97.5004%" y="2005" width="0.0328%" height="15" fill="rgb(235,35,13)" fg:x="92210" fg:w="31"/><text x="97.7504%" y="2015.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (31 samples, 0.03%)</title><rect x="97.5004%" y="1989" width="0.0328%" height="15" fill="rgb(233,158,34)" fg:x="92210" fg:w="31"/><text x="97.7504%" y="1999.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (31 samples, 0.03%)</title><rect x="97.5004%" y="1973" width="0.0328%" height="15" fill="rgb(215,151,48)" fg:x="92210" fg:w="31"/><text x="97.7504%" y="1983.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (31 samples, 0.03%)</title><rect x="97.5004%" y="1957" width="0.0328%" height="15" fill="rgb(229,84,14)" fg:x="92210" fg:w="31"/><text x="97.7504%" y="1967.50"></text></g><g><title>futex_wait_queue_me (23 samples, 0.02%)</title><rect x="97.5374%" y="1957" width="0.0243%" height="15" fill="rgb(229,68,14)" fg:x="92245" fg:w="23"/><text x="97.7874%" y="1967.50"></text></g><g><title>schedule (19 samples, 0.02%)</title><rect x="97.5416%" y="1941" width="0.0201%" height="15" fill="rgb(243,106,26)" fg:x="92249" fg:w="19"/><text x="97.7916%" y="1951.50"></text></g><g><title>__sched_text_start (19 samples, 0.02%)</title><rect x="97.5416%" y="1925" width="0.0201%" height="15" fill="rgb(206,45,38)" fg:x="92249" fg:w="19"/><text x="97.7916%" y="1935.50"></text></g><g><title>finish_task_switch (18 samples, 0.02%)</title><rect x="97.5427%" y="1909" width="0.0190%" height="15" fill="rgb(226,6,15)" fg:x="92250" fg:w="18"/><text x="97.7927%" y="1919.50"></text></g><g><title>futex_wait (30 samples, 0.03%)</title><rect x="97.5342%" y="1973" width="0.0317%" height="15" fill="rgb(232,22,54)" fg:x="92242" fg:w="30"/><text x="97.7842%" y="1983.50"></text></g><g><title>__x64_sys_futex (213 samples, 0.23%)</title><rect x="97.5331%" y="2005" width="0.2252%" height="15" fill="rgb(229,222,32)" fg:x="92241" fg:w="213"/><text x="97.7831%" y="2015.50"></text></g><g><title>do_futex (213 samples, 0.23%)</title><rect x="97.5331%" y="1989" width="0.2252%" height="15" fill="rgb(228,62,29)" fg:x="92241" fg:w="213"/><text x="97.7831%" y="1999.50"></text></g><g><title>futex_wake (182 samples, 0.19%)</title><rect x="97.5659%" y="1973" width="0.1924%" height="15" fill="rgb(251,103,34)" fg:x="92272" fg:w="182"/><text x="97.8159%" y="1983.50"></text></g><g><title>wake_up_q (176 samples, 0.19%)</title><rect x="97.5723%" y="1957" width="0.1861%" height="15" fill="rgb(233,12,30)" fg:x="92278" fg:w="176"/><text x="97.8223%" y="1967.50"></text></g><g><title>try_to_wake_up (175 samples, 0.19%)</title><rect x="97.5733%" y="1941" width="0.1850%" height="15" fill="rgb(238,52,0)" fg:x="92279" fg:w="175"/><text x="97.8233%" y="1951.50"></text></g><g><title>__lock_text_start (175 samples, 0.19%)</title><rect x="97.5733%" y="1925" width="0.1850%" height="15" fill="rgb(223,98,5)" fg:x="92279" fg:w="175"/><text x="97.8233%" y="1935.50"></text></g><g><title>do_syscall_64 (214 samples, 0.23%)</title><rect x="97.5331%" y="2021" width="0.2263%" height="15" fill="rgb(228,75,37)" fg:x="92241" fg:w="214"/><text x="97.7831%" y="2031.50"></text></g><g><title>tokio-runtime-w (1,374 samples, 1.45%)</title><rect x="96.3140%" y="2069" width="1.4528%" height="15" fill="rgb(205,115,49)" fg:x="91088" fg:w="1374"/><text x="96.5640%" y="2079.50"></text></g><g><title>syscall (221 samples, 0.23%)</title><rect x="97.5331%" y="2053" width="0.2337%" height="15" fill="rgb(250,154,43)" fg:x="92241" fg:w="221"/><text x="97.7831%" y="2063.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (221 samples, 0.23%)</title><rect x="97.5331%" y="2037" width="0.2337%" height="15" fill="rgb(226,43,29)" fg:x="92241" fg:w="221"/><text x="97.7831%" y="2047.50"></text></g><g><title>__memcpy_avx_unaligned_erms (54 samples, 0.06%)</title><rect x="98.9987%" y="2037" width="0.0571%" height="15" fill="rgb(249,228,39)" fg:x="93627" fg:w="54"/><text x="99.2487%" y="2047.50"></text></g><g><title>asm_exc_page_fault (18 samples, 0.02%)</title><rect x="99.0367%" y="2021" width="0.0190%" height="15" fill="rgb(216,79,43)" fg:x="93663" fg:w="18"/><text x="99.2867%" y="2031.50"></text></g><g><title>exc_page_fault (18 samples, 0.02%)</title><rect x="99.0367%" y="2005" width="0.0190%" height="15" fill="rgb(228,95,12)" fg:x="93663" fg:w="18"/><text x="99.2867%" y="2015.50"></text></g><g><title>do_user_addr_fault (18 samples, 0.02%)</title><rect x="99.0367%" y="1989" width="0.0190%" height="15" fill="rgb(249,221,15)" fg:x="93663" fg:w="18"/><text x="99.2867%" y="1999.50"></text></g><g><title>handle_mm_fault (17 samples, 0.02%)</title><rect x="99.0378%" y="1973" width="0.0180%" height="15" fill="rgb(233,34,13)" fg:x="93664" fg:w="17"/><text x="99.2878%" y="1983.50"></text></g><g><title>do_huge_pmd_anonymous_page (17 samples, 0.02%)</title><rect x="99.0378%" y="1957" width="0.0180%" height="15" fill="rgb(214,103,39)" fg:x="93664" fg:w="17"/><text x="99.2878%" y="1967.50"></text></g><g><title>clear_huge_page (16 samples, 0.02%)</title><rect x="99.0388%" y="1941" width="0.0169%" height="15" fill="rgb(251,126,39)" fg:x="93665" fg:w="16"/><text x="99.2888%" y="1951.50"></text></g><g><title>clear_subpage (14 samples, 0.01%)</title><rect x="99.0410%" y="1925" width="0.0148%" height="15" fill="rgb(214,216,36)" fg:x="93667" fg:w="14"/><text x="99.2910%" y="1935.50"></text></g><g><title>clear_page_erms (13 samples, 0.01%)</title><rect x="99.0420%" y="1909" width="0.0137%" height="15" fill="rgb(220,221,8)" fg:x="93668" fg:w="13"/><text x="99.2920%" y="1919.50"></text></g><g><title>handle_mm_fault (21 samples, 0.02%)</title><rect x="99.0558%" y="1989" width="0.0222%" height="15" fill="rgb(240,216,3)" fg:x="93681" fg:w="21"/><text x="99.3058%" y="1999.50"></text></g><g><title>do_huge_pmd_anonymous_page (20 samples, 0.02%)</title><rect x="99.0568%" y="1973" width="0.0211%" height="15" fill="rgb(232,218,17)" fg:x="93682" fg:w="20"/><text x="99.3068%" y="1983.50"></text></g><g><title>clear_huge_page (20 samples, 0.02%)</title><rect x="99.0568%" y="1957" width="0.0211%" height="15" fill="rgb(229,163,45)" fg:x="93682" fg:w="20"/><text x="99.3068%" y="1967.50"></text></g><g><title>clear_subpage (19 samples, 0.02%)</title><rect x="99.0579%" y="1941" width="0.0201%" height="15" fill="rgb(231,110,42)" fg:x="93683" fg:w="19"/><text x="99.3079%" y="1951.50"></text></g><g><title>clear_page_erms (18 samples, 0.02%)</title><rect x="99.0589%" y="1925" width="0.0190%" height="15" fill="rgb(208,170,48)" fg:x="93684" fg:w="18"/><text x="99.3089%" y="1935.50"></text></g><g><title>asm_exc_page_fault (22 samples, 0.02%)</title><rect x="99.0558%" y="2037" width="0.0233%" height="15" fill="rgb(239,116,25)" fg:x="93681" fg:w="22"/><text x="99.3058%" y="2047.50"></text></g><g><title>exc_page_fault (22 samples, 0.02%)</title><rect x="99.0558%" y="2021" width="0.0233%" height="15" fill="rgb(219,200,50)" fg:x="93681" fg:w="22"/><text x="99.3058%" y="2031.50"></text></g><g><title>do_user_addr_fault (22 samples, 0.02%)</title><rect x="99.0558%" y="2005" width="0.0233%" height="15" fill="rgb(245,200,0)" fg:x="93681" fg:w="22"/><text x="99.3058%" y="2015.50"></text></g><g><title>[perf-6356.map] (1,281 samples, 1.35%)</title><rect x="97.7700%" y="2053" width="1.3545%" height="15" fill="rgb(245,119,33)" fg:x="92465" fg:w="1281"/><text x="98.0200%" y="2063.50"></text></g><g><title>wasmer_vm_imported_memory32_copy (38 samples, 0.04%)</title><rect x="99.0843%" y="2037" width="0.0402%" height="15" fill="rgb(231,125,12)" fg:x="93708" fg:w="38"/><text x="99.3343%" y="2047.50"></text></g><g><title>free_unref_page_list (14 samples, 0.01%)</title><rect x="99.1372%" y="1813" width="0.0148%" height="15" fill="rgb(216,96,41)" fg:x="93758" fg:w="14"/><text x="99.3872%" y="1823.50"></text></g><g><title>__pagevec_release (24 samples, 0.03%)</title><rect x="99.1287%" y="1845" width="0.0254%" height="15" fill="rgb(248,43,45)" fg:x="93750" fg:w="24"/><text x="99.3787%" y="1855.50"></text></g><g><title>release_pages (24 samples, 0.03%)</title><rect x="99.1287%" y="1829" width="0.0254%" height="15" fill="rgb(217,222,7)" fg:x="93750" fg:w="24"/><text x="99.3787%" y="1839.50"></text></g><g><title>__lock_text_start (10 samples, 0.01%)</title><rect x="99.1541%" y="1829" width="0.0106%" height="15" fill="rgb(233,28,6)" fg:x="93774" fg:w="10"/><text x="99.4041%" y="1839.50"></text></g><g><title>delete_from_page_cache_batch (12 samples, 0.01%)</title><rect x="99.1541%" y="1845" width="0.0127%" height="15" fill="rgb(231,218,15)" fg:x="93774" fg:w="12"/><text x="99.4041%" y="1855.50"></text></g><g><title>jbd2_journal_try_to_free_buffers (15 samples, 0.02%)</title><rect x="99.1805%" y="1829" width="0.0159%" height="15" fill="rgb(226,171,48)" fg:x="93799" fg:w="15"/><text x="99.4305%" y="1839.50"></text></g><g><title>try_to_free_buffers (11 samples, 0.01%)</title><rect x="99.1848%" y="1813" width="0.0116%" height="15" fill="rgb(235,201,9)" fg:x="93803" fg:w="11"/><text x="99.4348%" y="1823.50"></text></g><g><title>truncate_cleanup_page (24 samples, 0.03%)</title><rect x="99.1721%" y="1845" width="0.0254%" height="15" fill="rgb(217,80,15)" fg:x="93791" fg:w="24"/><text x="99.4221%" y="1855.50"></text></g><g><title>[unknown] (72 samples, 0.08%)</title><rect x="99.1245%" y="2053" width="0.0761%" height="15" fill="rgb(219,152,8)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="2063.50"></text></g><g><title>__libc_open64 (72 samples, 0.08%)</title><rect x="99.1245%" y="2037" width="0.0761%" height="15" fill="rgb(243,107,38)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="2047.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (72 samples, 0.08%)</title><rect x="99.1245%" y="2021" width="0.0761%" height="15" fill="rgb(231,17,5)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="2031.50"></text></g><g><title>do_syscall_64 (72 samples, 0.08%)</title><rect x="99.1245%" y="2005" width="0.0761%" height="15" fill="rgb(209,25,54)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="2015.50"></text></g><g><title>do_sys_open (72 samples, 0.08%)</title><rect x="99.1245%" y="1989" width="0.0761%" height="15" fill="rgb(219,0,2)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="1999.50"></text></g><g><title>do_sys_openat2 (72 samples, 0.08%)</title><rect x="99.1245%" y="1973" width="0.0761%" height="15" fill="rgb(246,9,5)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="1983.50"></text></g><g><title>do_filp_open (72 samples, 0.08%)</title><rect x="99.1245%" y="1957" width="0.0761%" height="15" fill="rgb(226,159,4)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="1967.50"></text></g><g><title>path_openat (72 samples, 0.08%)</title><rect x="99.1245%" y="1941" width="0.0761%" height="15" fill="rgb(219,175,34)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="1951.50"></text></g><g><title>do_truncate (72 samples, 0.08%)</title><rect x="99.1245%" y="1925" width="0.0761%" height="15" fill="rgb(236,10,46)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="1935.50"></text></g><g><title>notify_change (72 samples, 0.08%)</title><rect x="99.1245%" y="1909" width="0.0761%" height="15" fill="rgb(240,211,16)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="1919.50"></text></g><g><title>ext4_setattr (72 samples, 0.08%)</title><rect x="99.1245%" y="1893" width="0.0761%" height="15" fill="rgb(205,3,43)" fg:x="93746" fg:w="72"/><text x="99.3745%" y="1903.50"></text></g><g><title>truncate_pagecache (71 samples, 0.08%)</title><rect x="99.1256%" y="1877" width="0.0751%" height="15" fill="rgb(245,7,22)" fg:x="93747" fg:w="71"/><text x="99.3756%" y="1887.50"></text></g><g><title>truncate_inode_pages_range (71 samples, 0.08%)</title><rect x="99.1256%" y="1861" width="0.0751%" height="15" fill="rgb(239,132,32)" fg:x="93747" fg:w="71"/><text x="99.3756%" y="1871.50"></text></g><g><title>copy_page_to_iter (20 samples, 0.02%)</title><rect x="99.2027%" y="1925" width="0.0211%" height="15" fill="rgb(228,202,34)" fg:x="93820" fg:w="20"/><text x="99.4527%" y="1935.50"></text></g><g><title>copyout (20 samples, 0.02%)</title><rect x="99.2027%" y="1909" width="0.0211%" height="15" fill="rgb(254,200,22)" fg:x="93820" fg:w="20"/><text x="99.4527%" y="1919.50"></text></g><g><title>copy_user_enhanced_fast_string (20 samples, 0.02%)</title><rect x="99.2027%" y="1893" width="0.0211%" height="15" fill="rgb(219,10,39)" fg:x="93820" fg:w="20"/><text x="99.4527%" y="1903.50"></text></g><g><title>asm_exc_page_fault (11 samples, 0.01%)</title><rect x="99.2123%" y="1877" width="0.0116%" height="15" fill="rgb(226,210,39)" fg:x="93829" fg:w="11"/><text x="99.4623%" y="1887.50"></text></g><g><title>exc_page_fault (11 samples, 0.01%)</title><rect x="99.2123%" y="1861" width="0.0116%" height="15" fill="rgb(208,219,16)" fg:x="93829" fg:w="11"/><text x="99.4623%" y="1871.50"></text></g><g><title>do_user_addr_fault (11 samples, 0.01%)</title><rect x="99.2123%" y="1845" width="0.0116%" height="15" fill="rgb(216,158,51)" fg:x="93829" fg:w="11"/><text x="99.4623%" y="1855.50"></text></g><g><title>handle_mm_fault (11 samples, 0.01%)</title><rect x="99.2123%" y="1829" width="0.0116%" height="15" fill="rgb(233,14,44)" fg:x="93829" fg:w="11"/><text x="99.4623%" y="1839.50"></text></g><g><title>do_huge_pmd_anonymous_page (11 samples, 0.01%)</title><rect x="99.2123%" y="1813" width="0.0116%" height="15" fill="rgb(237,97,39)" fg:x="93829" fg:w="11"/><text x="99.4623%" y="1823.50"></text></g><g><title>clear_huge_page (11 samples, 0.01%)</title><rect x="99.2123%" y="1797" width="0.0116%" height="15" fill="rgb(218,198,43)" fg:x="93829" fg:w="11"/><text x="99.4623%" y="1807.50"></text></g><g><title>clear_subpage (11 samples, 0.01%)</title><rect x="99.2123%" y="1781" width="0.0116%" height="15" fill="rgb(231,104,20)" fg:x="93829" fg:w="11"/><text x="99.4623%" y="1791.50"></text></g><g><title>clear_page_erms (11 samples, 0.01%)</title><rect x="99.2123%" y="1765" width="0.0116%" height="15" fill="rgb(254,36,13)" fg:x="93829" fg:w="11"/><text x="99.4623%" y="1775.50"></text></g><g><title>__GI___libc_read (23 samples, 0.02%)</title><rect x="99.2027%" y="2053" width="0.0243%" height="15" fill="rgb(248,14,50)" fg:x="93820" fg:w="23"/><text x="99.4527%" y="2063.50"></text></g><g><title>__GI___libc_read (23 samples, 0.02%)</title><rect x="99.2027%" y="2037" width="0.0243%" height="15" fill="rgb(217,107,29)" fg:x="93820" fg:w="23"/><text x="99.4527%" y="2047.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (23 samples, 0.02%)</title><rect x="99.2027%" y="2021" width="0.0243%" height="15" fill="rgb(251,169,33)" fg:x="93820" fg:w="23"/><text x="99.4527%" y="2031.50"></text></g><g><title>do_syscall_64 (23 samples, 0.02%)</title><rect x="99.2027%" y="2005" width="0.0243%" height="15" fill="rgb(217,108,32)" fg:x="93820" fg:w="23"/><text x="99.4527%" y="2015.50"></text></g><g><title>ksys_read (23 samples, 0.02%)</title><rect x="99.2027%" y="1989" width="0.0243%" height="15" fill="rgb(219,66,42)" fg:x="93820" fg:w="23"/><text x="99.4527%" y="1999.50"></text></g><g><title>vfs_read (23 samples, 0.02%)</title><rect x="99.2027%" y="1973" width="0.0243%" height="15" fill="rgb(206,180,7)" fg:x="93820" fg:w="23"/><text x="99.4527%" y="1983.50"></text></g><g><title>new_sync_read (23 samples, 0.02%)</title><rect x="99.2027%" y="1957" width="0.0243%" height="15" fill="rgb(208,226,31)" fg:x="93820" fg:w="23"/><text x="99.4527%" y="1967.50"></text></g><g><title>generic_file_buffered_read (23 samples, 0.02%)</title><rect x="99.2027%" y="1941" width="0.0243%" height="15" fill="rgb(218,26,49)" fg:x="93820" fg:w="23"/><text x="99.4527%" y="1951.50"></text></g><g><title>futures_executor::local_pool::block_on (12 samples, 0.01%)</title><rect x="99.2302%" y="1781" width="0.0127%" height="15" fill="rgb(233,197,48)" fg:x="93846" fg:w="12"/><text x="99.4802%" y="1791.50"></text></g><g><title>wasmer_wasix::runtime::Runtime::load_module::{{closure}} (12 samples, 0.01%)</title><rect x="99.2302%" y="1765" width="0.0127%" height="15" fill="rgb(252,181,51)" fg:x="93846" fg:w="12"/><text x="99.4802%" y="1775.50"></text></g><g><title>wasmer_cli::commands::run::Run::execute (17 samples, 0.02%)</title><rect x="99.2302%" y="1813" width="0.0180%" height="15" fill="rgb(253,90,19)" fg:x="93846" fg:w="17"/><text x="99.4802%" y="1823.50"></text></g><g><title>wasmer_cli::commands::run::Run::execute_inner (17 samples, 0.02%)</title><rect x="99.2302%" y="1797" width="0.0180%" height="15" fill="rgb(215,171,30)" fg:x="93846" fg:w="17"/><text x="99.4802%" y="1807.50"></text></g><g><title>__libc_start_call_main (20 samples, 0.02%)</title><rect x="99.2281%" y="2053" width="0.0211%" height="15" fill="rgb(214,222,9)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="2063.50"></text></g><g><title>main (20 samples, 0.02%)</title><rect x="99.2281%" y="2037" width="0.0211%" height="15" fill="rgb(223,3,22)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="2047.50"></text></g><g><title>std::rt::lang_start_internal (20 samples, 0.02%)</title><rect x="99.2281%" y="2021" width="0.0211%" height="15" fill="rgb(225,196,46)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="2031.50"></text></g><g><title>std::panic::catch_unwind (20 samples, 0.02%)</title><rect x="99.2281%" y="2005" width="0.0211%" height="15" fill="rgb(209,110,37)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="2015.50"></text></g><g><title>std::panicking::try (20 samples, 0.02%)</title><rect x="99.2281%" y="1989" width="0.0211%" height="15" fill="rgb(249,89,12)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1999.50"></text></g><g><title>std::panicking::try::do_call (20 samples, 0.02%)</title><rect x="99.2281%" y="1973" width="0.0211%" height="15" fill="rgb(226,27,33)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1983.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (20 samples, 0.02%)</title><rect x="99.2281%" y="1957" width="0.0211%" height="15" fill="rgb(213,82,22)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1967.50"></text></g><g><title>std::panic::catch_unwind (20 samples, 0.02%)</title><rect x="99.2281%" y="1941" width="0.0211%" height="15" fill="rgb(248,140,0)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1951.50"></text></g><g><title>std::panicking::try (20 samples, 0.02%)</title><rect x="99.2281%" y="1925" width="0.0211%" height="15" fill="rgb(228,106,3)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1935.50"></text></g><g><title>std::panicking::try::do_call (20 samples, 0.02%)</title><rect x="99.2281%" y="1909" width="0.0211%" height="15" fill="rgb(209,23,37)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1919.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (20 samples, 0.02%)</title><rect x="99.2281%" y="1893" width="0.0211%" height="15" fill="rgb(241,93,50)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1903.50"></text></g><g><title>std::rt::lang_start::{{closure}} (20 samples, 0.02%)</title><rect x="99.2281%" y="1877" width="0.0211%" height="15" fill="rgb(253,46,43)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1887.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20 samples, 0.02%)</title><rect x="99.2281%" y="1861" width="0.0211%" height="15" fill="rgb(226,206,43)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1871.50"></text></g><g><title>wasmer_cli::cli::wasmer_main (20 samples, 0.02%)</title><rect x="99.2281%" y="1845" width="0.0211%" height="15" fill="rgb(217,54,7)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1855.50"></text></g><g><title>wasmer_cli::cli::wasmer_main_inner (20 samples, 0.02%)</title><rect x="99.2281%" y="1829" width="0.0211%" height="15" fill="rgb(223,5,52)" fg:x="93844" fg:w="20"/><text x="99.4781%" y="1839.50"></text></g><g><title>do_huge_pmd_anonymous_page (12 samples, 0.01%)</title><rect x="99.5559%" y="1973" width="0.0127%" height="15" fill="rgb(206,52,46)" fg:x="94154" fg:w="12"/><text x="99.8059%" y="1983.50"></text></g><g><title>clear_huge_page (12 samples, 0.01%)</title><rect x="99.5559%" y="1957" width="0.0127%" height="15" fill="rgb(253,136,11)" fg:x="94154" fg:w="12"/><text x="99.8059%" y="1967.50"></text></g><g><title>clear_subpage (11 samples, 0.01%)</title><rect x="99.5570%" y="1941" width="0.0116%" height="15" fill="rgb(208,106,33)" fg:x="94155" fg:w="11"/><text x="99.8070%" y="1951.50"></text></g><g><title>clear_page_erms (11 samples, 0.01%)</title><rect x="99.5570%" y="1925" width="0.0116%" height="15" fill="rgb(206,54,4)" fg:x="94155" fg:w="11"/><text x="99.8070%" y="1935.50"></text></g><g><title>__memcpy_avx_unaligned_erms (301 samples, 0.32%)</title><rect x="99.2514%" y="2053" width="0.3183%" height="15" fill="rgb(213,3,15)" fg:x="93866" fg:w="301"/><text x="99.5014%" y="2063.50"></text></g><g><title>asm_exc_page_fault (13 samples, 0.01%)</title><rect x="99.5559%" y="2037" width="0.0137%" height="15" fill="rgb(252,211,39)" fg:x="94154" fg:w="13"/><text x="99.8059%" y="2047.50"></text></g><g><title>exc_page_fault (13 samples, 0.01%)</title><rect x="99.5559%" y="2021" width="0.0137%" height="15" fill="rgb(223,6,36)" fg:x="94154" fg:w="13"/><text x="99.8059%" y="2031.50"></text></g><g><title>do_user_addr_fault (13 samples, 0.01%)</title><rect x="99.5559%" y="2005" width="0.0137%" height="15" fill="rgb(252,169,45)" fg:x="94154" fg:w="13"/><text x="99.8059%" y="2015.50"></text></g><g><title>handle_mm_fault (13 samples, 0.01%)</title><rect x="99.5559%" y="1989" width="0.0137%" height="15" fill="rgb(212,48,26)" fg:x="94154" fg:w="13"/><text x="99.8059%" y="1999.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (14 samples, 0.01%)</title><rect x="99.6130%" y="1925" width="0.0148%" height="15" fill="rgb(251,102,48)" fg:x="94208" fg:w="14"/><text x="99.8630%" y="1935.50"></text></g><g><title>&lt;virtual_fs::host_fs::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (20 samples, 0.02%)</title><rect x="99.6130%" y="1941" width="0.0211%" height="15" fill="rgb(243,208,16)" fg:x="94208" fg:w="20"/><text x="99.8630%" y="1951.50"></text></g><g><title>futures_executor::local_pool::block_on (47 samples, 0.05%)</title><rect x="99.6045%" y="1973" width="0.0497%" height="15" fill="rgb(219,96,24)" fg:x="94200" fg:w="47"/><text x="99.8545%" y="1983.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (46 samples, 0.05%)</title><rect x="99.6056%" y="1957" width="0.0486%" height="15" fill="rgb(219,33,29)" fg:x="94201" fg:w="46"/><text x="99.8556%" y="1967.50"></text></g><g><title>wasmer_wasix::syscalls::wasi::fd_write::fd_write (81 samples, 0.09%)</title><rect x="99.5982%" y="2005" width="0.0856%" height="15" fill="rgb(223,176,5)" fg:x="94194" fg:w="81"/><text x="99.8482%" y="2015.50"></text></g><g><title>wasmer_wasix::syscalls::wasi::fd_write::fd_write_internal (78 samples, 0.08%)</title><rect x="99.6014%" y="1989" width="0.0825%" height="15" fill="rgb(228,140,14)" fg:x="94197" fg:w="78"/><text x="99.8514%" y="1999.50"></text></g><g><title>stack_call_trampoline (87 samples, 0.09%)</title><rect x="99.5929%" y="2053" width="0.0920%" height="15" fill="rgb(217,179,31)" fg:x="94189" fg:w="87"/><text x="99.8429%" y="2063.50"></text></g><g><title>corosensei::coroutine::on_stack::wrapper (87 samples, 0.09%)</title><rect x="99.5929%" y="2037" width="0.0920%" height="15" fill="rgb(230,9,30)" fg:x="94189" fg:w="87"/><text x="99.8429%" y="2047.50"></text></g><g><title>std::panicking::try (86 samples, 0.09%)</title><rect x="99.5940%" y="2021" width="0.0909%" height="15" fill="rgb(230,136,20)" fg:x="94190" fg:w="86"/><text x="99.8440%" y="2031.50"></text></g><g><title>futex_wait_queue_me (17 samples, 0.02%)</title><rect x="99.6965%" y="1957" width="0.0180%" height="15" fill="rgb(215,210,22)" fg:x="94287" fg:w="17"/><text x="99.9465%" y="1967.50"></text></g><g><title>schedule (16 samples, 0.02%)</title><rect x="99.6976%" y="1941" width="0.0169%" height="15" fill="rgb(218,43,5)" fg:x="94288" fg:w="16"/><text x="99.9476%" y="1951.50"></text></g><g><title>__sched_text_start (14 samples, 0.01%)</title><rect x="99.6997%" y="1925" width="0.0148%" height="15" fill="rgb(216,11,5)" fg:x="94290" fg:w="14"/><text x="99.9497%" y="1935.50"></text></g><g><title>finish_task_switch (12 samples, 0.01%)</title><rect x="99.7018%" y="1909" width="0.0127%" height="15" fill="rgb(209,82,29)" fg:x="94292" fg:w="12"/><text x="99.9518%" y="1919.50"></text></g><g><title>futex_wait (20 samples, 0.02%)</title><rect x="99.6944%" y="1973" width="0.0211%" height="15" fill="rgb(244,115,12)" fg:x="94285" fg:w="20"/><text x="99.9444%" y="1983.50"></text></g><g><title>__x64_sys_futex (278 samples, 0.29%)</title><rect x="99.6923%" y="2005" width="0.2939%" height="15" fill="rgb(222,82,18)" fg:x="94283" fg:w="278"/><text x="99.9423%" y="2015.50"></text></g><g><title>do_futex (278 samples, 0.29%)</title><rect x="99.6923%" y="1989" width="0.2939%" height="15" fill="rgb(249,227,8)" fg:x="94283" fg:w="278"/><text x="99.9423%" y="1999.50"></text></g><g><title>futex_wake (256 samples, 0.27%)</title><rect x="99.7156%" y="1973" width="0.2707%" height="15" fill="rgb(253,141,45)" fg:x="94305" fg:w="256"/><text x="99.9656%" y="1983.50"></text></g><g><title>wake_up_q (248 samples, 0.26%)</title><rect x="99.7240%" y="1957" width="0.2622%" height="15" fill="rgb(234,184,4)" fg:x="94313" fg:w="248"/><text x="99.9740%" y="1967.50"></text></g><g><title>try_to_wake_up (247 samples, 0.26%)</title><rect x="99.7251%" y="1941" width="0.2612%" height="15" fill="rgb(218,194,23)" fg:x="94314" fg:w="247"/><text x="99.9751%" y="1951.50"></text></g><g><title>__lock_text_start (246 samples, 0.26%)</title><rect x="99.7261%" y="1925" width="0.2601%" height="15" fill="rgb(235,66,41)" fg:x="94315" fg:w="246"/><text x="99.9761%" y="1935.50"></text></g><g><title>do_syscall_64 (281 samples, 0.30%)</title><rect x="99.6912%" y="2021" width="0.2971%" height="15" fill="rgb(245,217,1)" fg:x="94282" fg:w="281"/><text x="99.9412%" y="2031.50"></text></g><g><title>syscall (294 samples, 0.31%)</title><rect x="99.6849%" y="2053" width="0.3109%" height="15" fill="rgb(229,91,1)" fg:x="94276" fg:w="294"/><text x="99.9349%" y="2063.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (288 samples, 0.30%)</title><rect x="99.6912%" y="2037" width="0.3045%" height="15" fill="rgb(207,101,30)" fg:x="94282" fg:w="288"/><text x="99.9412%" y="2047.50"></text></g><g><title>all (94,574 samples, 100%)</title><rect x="0.0000%" y="2085" width="100.0000%" height="15" fill="rgb(223,82,49)" fg:x="0" fg:w="94574"/><text x="0.2500%" y="2095.50"></text></g><g><title>wasmer (2,112 samples, 2.23%)</title><rect x="97.7668%" y="2069" width="2.2332%" height="15" fill="rgb(218,167,17)" fg:x="92462" fg:w="2112"/><text x="98.0168%" y="2079.50">w..</text></g></svg></svg>